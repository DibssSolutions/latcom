webpackJsonp([0],{

/***/ 170:
/***/ (function(module, exports) {

eval("/**\n * @name InfoBox\n * @version 1.1.13 [March 19, 2014]\n * @author Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)\n * @copyright Copyright 2010 Gary Little [gary at luxcentral.com]\n * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.\n *  <p>\n *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several\n *  additional properties for advanced styling. An InfoBox can also be used as a map label.\n *  <p>\n *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.\n */\n\n/*!\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browser:true */\n/*global google */\n\n/**\n * @name InfoBoxOptions\n * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.\n * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).\n * @property {boolean} [disableAutoPan=false] Disable auto-pan on <tt>open</tt>.\n * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.\n * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox\n *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)\n *  to the map pixel corresponding to <tt>position</tt>.\n * @property {LatLng} position The geographic location at which to display the InfoBox.\n * @property {number} zIndex The CSS z-index style value for the InfoBox.\n *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.\n * @property {string} [boxClass=\"infoBox\"] The name of the CSS class defining the styles for the InfoBox container.\n * @property {Object} [boxStyle] An object literal whose properties define specific CSS\n *  style values to be applied to the InfoBox. Style values defined here override those that may\n *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the\n *  InfoBox has been created, all previously set styles (except those defined in the style sheet)\n *  are removed from the InfoBox before the new style values are applied.\n * @property {string} closeBoxMargin The CSS margin style value for the close box.\n *  The default is \"2px\" (a 2-pixel margin on all sides).\n * @property {string} closeBoxURL The URL of the image representing the close box.\n *  Note: The default is the URL for Google's standard close box.\n *  Set this property to \"\" if no close box is required.\n * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the\n *  map edge after an auto-pan.\n * @property {boolean} [isHidden=false] Hide the InfoBox on <tt>open</tt>.\n *  [Deprecated in favor of the <tt>visible</tt> property.]\n * @property {boolean} [visible=true] Show the InfoBox on <tt>open</tt>.\n * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>\n *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).\n * @property {string} pane The pane where the InfoBox is to appear (default is \"floatPane\").\n *  Set the pane to \"mapPane\" if the InfoBox is being used as a map label.\n *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.\n * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,\n *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox\n *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set\n *  this property to <tt>true</tt> if the InfoBox is being used as a map label.\n */\n\n/**\n * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.\n *  Call <tt>InfoBox.open</tt> to add the box to the map.\n * @constructor\n * @param {InfoBoxOptions} [opt_opts]\n */\nfunction InfoBox(opt_opts) {\n\n  opt_opts = opt_opts || {};\n\n  google.maps.OverlayView.apply(this, arguments);\n\n  // Standard options (in common with google.maps.InfoWindow):\n  //\n  this.content_ = opt_opts.content || \"\";\n  this.disableAutoPan_ = opt_opts.disableAutoPan || false;\n  this.maxWidth_ = opt_opts.maxWidth || 0;\n  this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);\n  this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);\n  this.zIndex_ = opt_opts.zIndex || null;\n\n  // Additional options (unique to InfoBox):\n  //\n  this.boxClass_ = opt_opts.boxClass || \"infoBox\";\n  this.boxStyle_ = opt_opts.boxStyle || {};\n  this.closeBoxMargin_ = opt_opts.closeBoxMargin || \"2px\";\n  this.closeBoxURL_ = opt_opts.closeBoxURL || \"http://www.google.com/intl/en_us/mapfiles/close.gif\";\n  if (opt_opts.closeBoxURL === \"\") {\n    this.closeBoxURL_ = \"\";\n  }\n  this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);\n\n  if (typeof opt_opts.visible === \"undefined\") {\n    if (typeof opt_opts.isHidden === \"undefined\") {\n      opt_opts.visible = true;\n    } else {\n      opt_opts.visible = !opt_opts.isHidden;\n    }\n  }\n  this.isHidden_ = !opt_opts.visible;\n\n  this.alignBottom_ = opt_opts.alignBottom || false;\n  this.pane_ = opt_opts.pane || \"floatPane\";\n  this.enableEventPropagation_ = opt_opts.enableEventPropagation || false;\n\n  this.div_ = null;\n  this.closeListener_ = null;\n  this.moveListener_ = null;\n  this.mapListener_ = null;\n  this.contextListener_ = null;\n  this.eventListeners_ = null;\n  this.fixedWidthSet_ = null;\n}\n\n/* InfoBox extends OverlayView in the Google Maps API v3.\n */\nInfoBox.prototype = new google.maps.OverlayView();\n\n/**\n * Creates the DIV representing the InfoBox.\n * @private\n */\nInfoBox.prototype.createInfoBoxDiv_ = function () {\n\n  var i;\n  var events;\n  var bw;\n  var me = this;\n\n  // This handler prevents an event in the InfoBox from being passed on to the map.\n  //\n  var cancelHandler = function (e) {\n    e.cancelBubble = true;\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n  };\n\n  // This handler ignores the current event in the InfoBox and conditionally prevents\n  // the event from being passed on to the map. It is used for the contextmenu event.\n  //\n  var ignoreHandler = function (e) {\n\n    e.returnValue = false;\n\n    if (e.preventDefault) {\n\n      e.preventDefault();\n    }\n\n    if (!me.enableEventPropagation_) {\n\n      cancelHandler(e);\n    }\n  };\n\n  if (!this.div_) {\n\n    this.div_ = document.createElement(\"div\");\n\n    this.setBoxStyle_();\n\n    if (typeof this.content_.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + this.content_;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(this.content_);\n    }\n\n    // Add the InfoBox DIV to the DOM\n    this.getPanes()[this.pane_].appendChild(this.div_);\n\n    this.addClickHandler_();\n\n    if (this.div_.style.width) {\n\n      this.fixedWidthSet_ = true;\n\n    } else {\n\n      if (this.maxWidth_ !== 0 && this.div_.offsetWidth > this.maxWidth_) {\n\n        this.div_.style.width = this.maxWidth_;\n        this.fixedWidthSet_ = true;\n\n      } else { // The following code is needed to overcome problems with MSIE\n\n        bw = this.getBoxWidths_();\n\n        this.div_.style.width = (this.div_.offsetWidth - bw.left - bw.right) + \"px\";\n        this.fixedWidthSet_ = false;\n      }\n    }\n\n    this.panBox_(this.disableAutoPan_);\n\n    if (!this.enableEventPropagation_) {\n\n      this.eventListeners_ = [];\n\n      // Cancel event propagation.\n      //\n      // Note: mousemove not included (to resolve Issue 152)\n      events = [\"mousedown\", \"mouseover\", \"mouseout\", \"mouseup\",\n      \"click\", \"dblclick\", \"touchstart\", \"touchend\", \"touchmove\"];\n\n      for (i = 0; i < events.length; i++) {\n\n        this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));\n      }\n      \n      // Workaround for Google bug that causes the cursor to change to a pointer\n      // when the mouse moves over a marker underneath InfoBox.\n      this.eventListeners_.push(google.maps.event.addDomListener(this.div_, \"mouseover\", function (e) {\n        this.style.cursor = \"default\";\n      }));\n    }\n\n    this.contextListener_ = google.maps.event.addDomListener(this.div_, \"contextmenu\", ignoreHandler);\n\n    /**\n     * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.\n     * @name InfoBox#domready\n     * @event\n     */\n    google.maps.event.trigger(this, \"domready\");\n  }\n};\n\n/**\n * Returns the HTML <IMG> tag for the close box.\n * @private\n */\nInfoBox.prototype.getCloseBoxImg_ = function () {\n\n  var img = \"\";\n\n  if (this.closeBoxURL_ !== \"\") {\n\n    img  = \"<img\";\n    img += \" src='\" + this.closeBoxURL_ + \"'\";\n    img += \" align=right\"; // Do this because Opera chokes on style='float: right;'\n    img += \" style='\";\n    img += \" position: relative;\"; // Required by MSIE\n    img += \" cursor: pointer;\";\n    img += \" margin: \" + this.closeBoxMargin_ + \";\";\n    img += \"'>\";\n  }\n\n  return img;\n};\n\n/**\n * Adds the click handler to the InfoBox close box.\n * @private\n */\nInfoBox.prototype.addClickHandler_ = function () {\n\n  var closeBox;\n\n  if (this.closeBoxURL_ !== \"\") {\n\n    closeBox = this.div_.firstChild;\n    this.closeListener_ = google.maps.event.addDomListener(closeBox, \"click\", this.getCloseClickHandler_());\n\n  } else {\n\n    this.closeListener_ = null;\n  }\n};\n\n/**\n * Returns the function to call when the user clicks the close box of an InfoBox.\n * @private\n */\nInfoBox.prototype.getCloseClickHandler_ = function () {\n\n  var me = this;\n\n  return function (e) {\n\n    // 1.0.3 fix: Always prevent propagation of a close box click to the map:\n    e.cancelBubble = true;\n\n    if (e.stopPropagation) {\n\n      e.stopPropagation();\n    }\n\n    /**\n     * This event is fired when the InfoBox's close box is clicked.\n     * @name InfoBox#closeclick\n     * @event\n     */\n    google.maps.event.trigger(me, \"closeclick\");\n\n    me.close();\n  };\n};\n\n/**\n * Pans the map so that the InfoBox appears entirely within the map's visible area.\n * @private\n */\nInfoBox.prototype.panBox_ = function (disablePan) {\n\n  var map;\n  var bounds;\n  var xOffset = 0, yOffset = 0;\n\n  if (!disablePan) {\n\n    map = this.getMap();\n\n    if (map instanceof google.maps.Map) { // Only pan if attached to map, not panorama\n\n      if (!map.getBounds().contains(this.position_)) {\n      // Marker not in visible area of map, so set center\n      // of map to the marker position first.\n        map.setCenter(this.position_);\n      }\n\n      bounds = map.getBounds();\n\n      var mapDiv = map.getDiv();\n      var mapWidth = mapDiv.offsetWidth;\n      var mapHeight = mapDiv.offsetHeight;\n      var iwOffsetX = this.pixelOffset_.width;\n      var iwOffsetY = this.pixelOffset_.height;\n      var iwWidth = this.div_.offsetWidth;\n      var iwHeight = this.div_.offsetHeight;\n      var padX = this.infoBoxClearance_.width;\n      var padY = this.infoBoxClearance_.height;\n      var pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);\n\n      if (pixPosition.x < (-iwOffsetX + padX)) {\n        xOffset = pixPosition.x + iwOffsetX - padX;\n      } else if ((pixPosition.x + iwWidth + iwOffsetX + padX) > mapWidth) {\n        xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;\n      }\n      if (this.alignBottom_) {\n        if (pixPosition.y < (-iwOffsetY + padY + iwHeight)) {\n          yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;\n        } else if ((pixPosition.y + iwOffsetY + padY) > mapHeight) {\n          yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;\n        }\n      } else {\n        if (pixPosition.y < (-iwOffsetY + padY)) {\n          yOffset = pixPosition.y + iwOffsetY - padY;\n        } else if ((pixPosition.y + iwHeight + iwOffsetY + padY) > mapHeight) {\n          yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;\n        }\n      }\n\n      if (!(xOffset === 0 && yOffset === 0)) {\n\n        // Move the map to the shifted center.\n        //\n        var c = map.getCenter();\n        map.panBy(xOffset, yOffset);\n      }\n    }\n  }\n};\n\n/**\n * Sets the style of the InfoBox by setting the style sheet and applying\n * other specific styles requested.\n * @private\n */\nInfoBox.prototype.setBoxStyle_ = function () {\n\n  var i, boxStyle;\n\n  if (this.div_) {\n\n    // Apply style values from the style sheet defined in the boxClass parameter:\n    this.div_.className = this.boxClass_;\n\n    // Clear existing inline style values:\n    this.div_.style.cssText = \"\";\n\n    // Apply style values defined in the boxStyle parameter:\n    boxStyle = this.boxStyle_;\n    for (i in boxStyle) {\n\n      if (boxStyle.hasOwnProperty(i)) {\n\n        this.div_.style[i] = boxStyle[i];\n      }\n    }\n\n    // Fix for iOS disappearing InfoBox problem.\n    // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad\n    this.div_.style.WebkitTransform = \"translateZ(0)\";\n\n    // Fix up opacity style for benefit of MSIE:\n    //\n    if (typeof this.div_.style.opacity !== \"undefined\" && this.div_.style.opacity !== \"\") {\n      // See http://www.quirksmode.org/css/opacity.html\n      this.div_.style.MsFilter = \"\\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + (this.div_.style.opacity * 100) + \")\\\"\";\n      this.div_.style.filter = \"alpha(opacity=\" + (this.div_.style.opacity * 100) + \")\";\n    }\n\n    // Apply required styles:\n    //\n    this.div_.style.position = \"absolute\";\n    this.div_.style.visibility = 'hidden';\n    if (this.zIndex_ !== null) {\n\n      this.div_.style.zIndex = this.zIndex_;\n    }\n    if (!this.div_.style.overflow) {\n      this.div_.style.overflow = \"auto\";\n    }\n  }\n};\n\n/**\n * Get the widths of the borders of the InfoBox.\n * @private\n * @return {Object} widths object (top, bottom left, right)\n */\nInfoBox.prototype.getBoxWidths_ = function () {\n\n  var computedStyle;\n  var bw = {top: 0, bottom: 0, left: 0, right: 0};\n  var box = this.div_;\n\n  if (document.defaultView && document.defaultView.getComputedStyle) {\n\n    computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, \"\");\n\n    if (computedStyle) {\n\n      // The computed styles are always in pixel units (good!)\n      bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    }\n\n  } else if (document.documentElement.currentStyle) { // MSIE\n\n    if (box.currentStyle) {\n\n      // The current styles may not be in pixel units, but assume they are (bad!)\n      bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;\n    }\n  }\n\n  return bw;\n};\n\n/**\n * Invoked when <tt>close</tt> is called. Do not call it directly.\n */\nInfoBox.prototype.onRemove = function () {\n\n  if (this.div_) {\n\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n\n/**\n * Draws the InfoBox based on the current map projection and zoom level.\n */\nInfoBox.prototype.draw = function () {\n\n  this.createInfoBoxDiv_();\n\n  var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);\n\n  this.div_.style.left = (pixPosition.x + this.pixelOffset_.width) + \"px\";\n  \n  if (this.alignBottom_) {\n    this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + \"px\";\n  } else {\n    this.div_.style.top = (pixPosition.y + this.pixelOffset_.height) + \"px\";\n  }\n\n  if (this.isHidden_) {\n\n    this.div_.style.visibility = \"hidden\";\n\n  } else {\n\n    this.div_.style.visibility = \"visible\";\n  }\n};\n\n/**\n * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,\n *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>\n *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one\n *  is <tt>open</tt>ed.\n * @param {InfoBoxOptions} opt_opts\n */\nInfoBox.prototype.setOptions = function (opt_opts) {\n  if (typeof opt_opts.boxClass !== \"undefined\") { // Must be first\n\n    this.boxClass_ = opt_opts.boxClass;\n    this.setBoxStyle_();\n  }\n  if (typeof opt_opts.boxStyle !== \"undefined\") { // Must be second\n\n    this.boxStyle_ = opt_opts.boxStyle;\n    this.setBoxStyle_();\n  }\n  if (typeof opt_opts.content !== \"undefined\") {\n\n    this.setContent(opt_opts.content);\n  }\n  if (typeof opt_opts.disableAutoPan !== \"undefined\") {\n\n    this.disableAutoPan_ = opt_opts.disableAutoPan;\n  }\n  if (typeof opt_opts.maxWidth !== \"undefined\") {\n\n    this.maxWidth_ = opt_opts.maxWidth;\n  }\n  if (typeof opt_opts.pixelOffset !== \"undefined\") {\n\n    this.pixelOffset_ = opt_opts.pixelOffset;\n  }\n  if (typeof opt_opts.alignBottom !== \"undefined\") {\n\n    this.alignBottom_ = opt_opts.alignBottom;\n  }\n  if (typeof opt_opts.position !== \"undefined\") {\n\n    this.setPosition(opt_opts.position);\n  }\n  if (typeof opt_opts.zIndex !== \"undefined\") {\n\n    this.setZIndex(opt_opts.zIndex);\n  }\n  if (typeof opt_opts.closeBoxMargin !== \"undefined\") {\n\n    this.closeBoxMargin_ = opt_opts.closeBoxMargin;\n  }\n  if (typeof opt_opts.closeBoxURL !== \"undefined\") {\n\n    this.closeBoxURL_ = opt_opts.closeBoxURL;\n  }\n  if (typeof opt_opts.infoBoxClearance !== \"undefined\") {\n\n    this.infoBoxClearance_ = opt_opts.infoBoxClearance;\n  }\n  if (typeof opt_opts.isHidden !== \"undefined\") {\n\n    this.isHidden_ = opt_opts.isHidden;\n  }\n  if (typeof opt_opts.visible !== \"undefined\") {\n\n    this.isHidden_ = !opt_opts.visible;\n  }\n  if (typeof opt_opts.enableEventPropagation !== \"undefined\") {\n\n    this.enableEventPropagation_ = opt_opts.enableEventPropagation;\n  }\n\n  if (this.div_) {\n\n    this.draw();\n  }\n};\n\n/**\n * Sets the content of the InfoBox.\n *  The content can be plain text or an HTML DOM node.\n * @param {string|Node} content\n */\nInfoBox.prototype.setContent = function (content) {\n  this.content_ = content;\n\n  if (this.div_) {\n\n    if (this.closeListener_) {\n\n      google.maps.event.removeListener(this.closeListener_);\n      this.closeListener_ = null;\n    }\n\n    // Odd code required to make things work with MSIE.\n    //\n    if (!this.fixedWidthSet_) {\n\n      this.div_.style.width = \"\";\n    }\n\n    if (typeof content.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + content;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(content);\n    }\n\n    // Perverse code required to make things work with MSIE.\n    // (Ensures the close box does, in fact, float to the right.)\n    //\n    if (!this.fixedWidthSet_) {\n      this.div_.style.width = this.div_.offsetWidth + \"px\";\n      if (typeof content.nodeType === \"undefined\") {\n        this.div_.innerHTML = this.getCloseBoxImg_() + content;\n      } else {\n        this.div_.innerHTML = this.getCloseBoxImg_();\n        this.div_.appendChild(content);\n      }\n    }\n\n    this.addClickHandler_();\n  }\n\n  /**\n   * This event is fired when the content of the InfoBox changes.\n   * @name InfoBox#content_changed\n   * @event\n   */\n  google.maps.event.trigger(this, \"content_changed\");\n};\n\n/**\n * Sets the geographic location of the InfoBox.\n * @param {LatLng} latlng\n */\nInfoBox.prototype.setPosition = function (latlng) {\n\n  this.position_ = latlng;\n\n  if (this.div_) {\n\n    this.draw();\n  }\n\n  /**\n   * This event is fired when the position of the InfoBox changes.\n   * @name InfoBox#position_changed\n   * @event\n   */\n  google.maps.event.trigger(this, \"position_changed\");\n};\n\n/**\n * Sets the zIndex style for the InfoBox.\n * @param {number} index\n */\nInfoBox.prototype.setZIndex = function (index) {\n\n  this.zIndex_ = index;\n\n  if (this.div_) {\n\n    this.div_.style.zIndex = index;\n  }\n\n  /**\n   * This event is fired when the zIndex of the InfoBox changes.\n   * @name InfoBox#zindex_changed\n   * @event\n   */\n  google.maps.event.trigger(this, \"zindex_changed\");\n};\n\n/**\n * Sets the visibility of the InfoBox.\n * @param {boolean} isVisible\n */\nInfoBox.prototype.setVisible = function (isVisible) {\n\n  this.isHidden_ = !isVisible;\n  if (this.div_) {\n    this.div_.style.visibility = (this.isHidden_ ? \"hidden\" : \"visible\");\n  }\n};\n\n/**\n * Returns the content of the InfoBox.\n * @returns {string}\n */\nInfoBox.prototype.getContent = function () {\n\n  return this.content_;\n};\n\n/**\n * Returns the geographic location of the InfoBox.\n * @returns {LatLng}\n */\nInfoBox.prototype.getPosition = function () {\n\n  return this.position_;\n};\n\n/**\n * Returns the zIndex for the InfoBox.\n * @returns {number}\n */\nInfoBox.prototype.getZIndex = function () {\n\n  return this.zIndex_;\n};\n\n/**\n * Returns a flag indicating whether the InfoBox is visible.\n * @returns {boolean}\n */\nInfoBox.prototype.getVisible = function () {\n\n  var isVisible;\n\n  if ((typeof this.getMap() === \"undefined\") || (this.getMap() === null)) {\n    isVisible = false;\n  } else {\n    isVisible = !this.isHidden_;\n  }\n  return isVisible;\n};\n\n/**\n * Shows the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\nInfoBox.prototype.show = function () {\n\n  this.isHidden_ = false;\n  if (this.div_) {\n    this.div_.style.visibility = \"visible\";\n  }\n};\n\n/**\n * Hides the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\nInfoBox.prototype.hide = function () {\n\n  this.isHidden_ = true;\n  if (this.div_) {\n    this.div_.style.visibility = \"hidden\";\n  }\n};\n\n/**\n * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>\n *  (usually a <tt>google.maps.Marker</tt>) is specified, the position\n *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the\n *  anchor is dragged to a new location, the InfoBox moves as well.\n * @param {Map|StreetViewPanorama} map\n * @param {MVCObject} [anchor]\n */\nInfoBox.prototype.open = function (map, anchor) {\n\n  var me = this;\n\n  if (anchor) {\n\n    this.position_ = anchor.getPosition();\n    this.moveListener_ = google.maps.event.addListener(anchor, \"position_changed\", function () {\n      me.setPosition(this.getPosition());\n    });\n\n    this.mapListener_ = google.maps.event.addListener(anchor, \"map_changed\", function() {\n      me.setMap(this.map);\n    });    \n  }\n\n  this.setMap(map);\n\n  if (this.div_) {\n\n    this.panBox_();\n  }\n};\n\n/**\n * Removes the InfoBox from the map.\n */\nInfoBox.prototype.close = function () {\n\n  var i;\n\n  if (this.closeListener_) {\n\n    google.maps.event.removeListener(this.closeListener_);\n    this.closeListener_ = null;\n  }\n\n  if (this.eventListeners_) {\n    \n    for (i = 0; i < this.eventListeners_.length; i++) {\n\n      google.maps.event.removeListener(this.eventListeners_[i]);\n    }\n    this.eventListeners_ = null;\n  }\n\n  if (this.moveListener_) {\n\n    google.maps.event.removeListener(this.moveListener_);\n    this.moveListener_ = null;\n  }\n\n  if (this.mapListener_) {\n    \n    google.maps.event.removeListener(this.mapListener_);\n    this.mapListener_ = null;    \n  }\n \n  if (this.contextListener_) {\n\n    google.maps.event.removeListener(this.contextListener_);\n    this.contextListener_ = null;\n  }\n\n  this.setMap(null);\n};\n\n\nmodule.exports = InfoBox;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTcwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL0Q6L3ZpdGFsaWsvbGF0Y29tL34vZ29vZ2xlLW1hcHMtaW5mb2JveC9pbmZvYm94LW1vZHVsZS5qcz8xZjkzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5hbWUgSW5mb0JveFxuICogQHZlcnNpb24gMS4xLjEzIFtNYXJjaCAxOSwgMjAxNF1cbiAqIEBhdXRob3IgR2FyeSBMaXR0bGUgKGluc3BpcmVkIGJ5IHByb29mLW9mLWNvbmNlcHQgY29kZSBmcm9tIFBhbWVsYSBGb3ggb2YgR29vZ2xlKVxuICogQGNvcHlyaWdodCBDb3B5cmlnaHQgMjAxMCBHYXJ5IExpdHRsZSBbZ2FyeSBhdCBsdXhjZW50cmFsLmNvbV1cbiAqIEBmaWxlb3ZlcnZpZXcgSW5mb0JveCBleHRlbmRzIHRoZSBHb29nbGUgTWFwcyBKYXZhU2NyaXB0IEFQSSBWMyA8dHQ+T3ZlcmxheVZpZXc8L3R0PiBjbGFzcy5cbiAqICA8cD5cbiAqICBBbiBJbmZvQm94IGJlaGF2ZXMgbGlrZSBhIDx0dD5nb29nbGUubWFwcy5JbmZvV2luZG93PC90dD4sIGJ1dCBpdCBzdXBwb3J0cyBzZXZlcmFsXG4gKiAgYWRkaXRpb25hbCBwcm9wZXJ0aWVzIGZvciBhZHZhbmNlZCBzdHlsaW5nLiBBbiBJbmZvQm94IGNhbiBhbHNvIGJlIHVzZWQgYXMgYSBtYXAgbGFiZWwuXG4gKiAgPHA+XG4gKiAgQW4gSW5mb0JveCBhbHNvIGZpcmVzIHRoZSBzYW1lIGV2ZW50cyBhcyBhIDx0dD5nb29nbGUubWFwcy5JbmZvV2luZG93PC90dD4uXG4gKi9cblxuLyohXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLypqc2xpbnQgYnJvd3Nlcjp0cnVlICovXG4vKmdsb2JhbCBnb29nbGUgKi9cblxuLyoqXG4gKiBAbmFtZSBJbmZvQm94T3B0aW9uc1xuICogQGNsYXNzIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgb3B0aW9uYWwgcGFyYW1ldGVyIHBhc3NlZCB0byB0aGUge0BsaW5rIEluZm9Cb3h9IGNvbnN0cnVjdG9yLlxuICogQHByb3BlcnR5IHtzdHJpbmd8Tm9kZX0gY29udGVudCBUaGUgY29udGVudCBvZiB0aGUgSW5mb0JveCAocGxhaW4gdGV4dCBvciBhbiBIVE1MIERPTSBub2RlKS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Rpc2FibGVBdXRvUGFuPWZhbHNlXSBEaXNhYmxlIGF1dG8tcGFuIG9uIDx0dD5vcGVuPC90dD4uXG4gKiBAcHJvcGVydHkge251bWJlcn0gbWF4V2lkdGggVGhlIG1heGltdW0gd2lkdGggKGluIHBpeGVscykgb2YgdGhlIEluZm9Cb3guIFNldCB0byAwIGlmIG5vIG1heGltdW0uXG4gKiBAcHJvcGVydHkge1NpemV9IHBpeGVsT2Zmc2V0IFRoZSBvZmZzZXQgKGluIHBpeGVscykgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBJbmZvQm94XG4gKiAgKG9yIHRoZSBib3R0b20gbGVmdCBjb3JuZXIgaWYgdGhlIDxjb2RlPmFsaWduQm90dG9tPC9jb2RlPiBwcm9wZXJ0eSBpcyA8Y29kZT50cnVlPC9jb2RlPilcbiAqICB0byB0aGUgbWFwIHBpeGVsIGNvcnJlc3BvbmRpbmcgdG8gPHR0PnBvc2l0aW9uPC90dD4uXG4gKiBAcHJvcGVydHkge0xhdExuZ30gcG9zaXRpb24gVGhlIGdlb2dyYXBoaWMgbG9jYXRpb24gYXQgd2hpY2ggdG8gZGlzcGxheSB0aGUgSW5mb0JveC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB6SW5kZXggVGhlIENTUyB6LWluZGV4IHN0eWxlIHZhbHVlIGZvciB0aGUgSW5mb0JveC5cbiAqICBOb3RlOiBUaGlzIHZhbHVlIG92ZXJyaWRlcyBhIHpJbmRleCBzZXR0aW5nIHNwZWNpZmllZCBpbiB0aGUgPHR0PmJveFN0eWxlPC90dD4gcHJvcGVydHkuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gW2JveENsYXNzPVwiaW5mb0JveFwiXSBUaGUgbmFtZSBvZiB0aGUgQ1NTIGNsYXNzIGRlZmluaW5nIHRoZSBzdHlsZXMgZm9yIHRoZSBJbmZvQm94IGNvbnRhaW5lci5cbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBbYm94U3R5bGVdIEFuIG9iamVjdCBsaXRlcmFsIHdob3NlIHByb3BlcnRpZXMgZGVmaW5lIHNwZWNpZmljIENTU1xuICogIHN0eWxlIHZhbHVlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBJbmZvQm94LiBTdHlsZSB2YWx1ZXMgZGVmaW5lZCBoZXJlIG92ZXJyaWRlIHRob3NlIHRoYXQgbWF5XG4gKiAgYmUgZGVmaW5lZCBpbiB0aGUgPGNvZGU+Ym94Q2xhc3M8L2NvZGU+IHN0eWxlIHNoZWV0LiBJZiB0aGlzIHByb3BlcnR5IGlzIGNoYW5nZWQgYWZ0ZXIgdGhlXG4gKiAgSW5mb0JveCBoYXMgYmVlbiBjcmVhdGVkLCBhbGwgcHJldmlvdXNseSBzZXQgc3R5bGVzIChleGNlcHQgdGhvc2UgZGVmaW5lZCBpbiB0aGUgc3R5bGUgc2hlZXQpXG4gKiAgYXJlIHJlbW92ZWQgZnJvbSB0aGUgSW5mb0JveCBiZWZvcmUgdGhlIG5ldyBzdHlsZSB2YWx1ZXMgYXJlIGFwcGxpZWQuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY2xvc2VCb3hNYXJnaW4gVGhlIENTUyBtYXJnaW4gc3R5bGUgdmFsdWUgZm9yIHRoZSBjbG9zZSBib3guXG4gKiAgVGhlIGRlZmF1bHQgaXMgXCIycHhcIiAoYSAyLXBpeGVsIG1hcmdpbiBvbiBhbGwgc2lkZXMpLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNsb3NlQm94VVJMIFRoZSBVUkwgb2YgdGhlIGltYWdlIHJlcHJlc2VudGluZyB0aGUgY2xvc2UgYm94LlxuICogIE5vdGU6IFRoZSBkZWZhdWx0IGlzIHRoZSBVUkwgZm9yIEdvb2dsZSdzIHN0YW5kYXJkIGNsb3NlIGJveC5cbiAqICBTZXQgdGhpcyBwcm9wZXJ0eSB0byBcIlwiIGlmIG5vIGNsb3NlIGJveCBpcyByZXF1aXJlZC5cbiAqIEBwcm9wZXJ0eSB7U2l6ZX0gaW5mb0JveENsZWFyYW5jZSBNaW5pbXVtIG9mZnNldCAoaW4gcGl4ZWxzKSBmcm9tIHRoZSBJbmZvQm94IHRvIHRoZVxuICogIG1hcCBlZGdlIGFmdGVyIGFuIGF1dG8tcGFuLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbaXNIaWRkZW49ZmFsc2VdIEhpZGUgdGhlIEluZm9Cb3ggb24gPHR0Pm9wZW48L3R0Pi5cbiAqICBbRGVwcmVjYXRlZCBpbiBmYXZvciBvZiB0aGUgPHR0PnZpc2libGU8L3R0PiBwcm9wZXJ0eS5dXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt2aXNpYmxlPXRydWVdIFNob3cgdGhlIEluZm9Cb3ggb24gPHR0Pm9wZW48L3R0Pi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYWxpZ25Cb3R0b20gQWxpZ24gdGhlIGJvdHRvbSBsZWZ0IGNvcm5lciBvZiB0aGUgSW5mb0JveCB0byB0aGUgPGNvZGU+cG9zaXRpb248L2NvZGU+XG4gKiAgbG9jYXRpb24gKGRlZmF1bHQgaXMgPHR0PmZhbHNlPC90dD4gd2hpY2ggbWVhbnMgdGhhdCB0aGUgdG9wIGxlZnQgY29ybmVyIG9mIHRoZSBJbmZvQm94IGlzIGFsaWduZWQpLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhbmUgVGhlIHBhbmUgd2hlcmUgdGhlIEluZm9Cb3ggaXMgdG8gYXBwZWFyIChkZWZhdWx0IGlzIFwiZmxvYXRQYW5lXCIpLlxuICogIFNldCB0aGUgcGFuZSB0byBcIm1hcFBhbmVcIiBpZiB0aGUgSW5mb0JveCBpcyBiZWluZyB1c2VkIGFzIGEgbWFwIGxhYmVsLlxuICogIFZhbGlkIHBhbmUgbmFtZXMgYXJlIHRoZSBwcm9wZXJ0eSBuYW1lcyBmb3IgdGhlIDx0dD5nb29nbGUubWFwcy5NYXBQYW5lczwvdHQ+IG9iamVjdC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZW5hYmxlRXZlbnRQcm9wYWdhdGlvbiBQcm9wYWdhdGUgbW91c2Vkb3duLCBtb3VzZW1vdmUsIG1vdXNlb3ZlciwgbW91c2VvdXQsXG4gKiAgbW91c2V1cCwgY2xpY2ssIGRibGNsaWNrLCB0b3VjaHN0YXJ0LCB0b3VjaGVuZCwgdG91Y2htb3ZlLCBhbmQgY29udGV4dG1lbnUgZXZlbnRzIGluIHRoZSBJbmZvQm94XG4gKiAgKGRlZmF1bHQgaXMgPHR0PmZhbHNlPC90dD4gdG8gbWltaWMgdGhlIGJlaGF2aW9yIG9mIGEgPHR0Pmdvb2dsZS5tYXBzLkluZm9XaW5kb3c8L3R0PikuIFNldFxuICogIHRoaXMgcHJvcGVydHkgdG8gPHR0PnRydWU8L3R0PiBpZiB0aGUgSW5mb0JveCBpcyBiZWluZyB1c2VkIGFzIGEgbWFwIGxhYmVsLlxuICovXG5cbi8qKlxuICogQ3JlYXRlcyBhbiBJbmZvQm94IHdpdGggdGhlIG9wdGlvbnMgc3BlY2lmaWVkIGluIHtAbGluayBJbmZvQm94T3B0aW9uc30uXG4gKiAgQ2FsbCA8dHQ+SW5mb0JveC5vcGVuPC90dD4gdG8gYWRkIHRoZSBib3ggdG8gdGhlIG1hcC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtJbmZvQm94T3B0aW9uc30gW29wdF9vcHRzXVxuICovXG5mdW5jdGlvbiBJbmZvQm94KG9wdF9vcHRzKSB7XG5cbiAgb3B0X29wdHMgPSBvcHRfb3B0cyB8fCB7fTtcblxuICBnb29nbGUubWFwcy5PdmVybGF5Vmlldy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIC8vIFN0YW5kYXJkIG9wdGlvbnMgKGluIGNvbW1vbiB3aXRoIGdvb2dsZS5tYXBzLkluZm9XaW5kb3cpOlxuICAvL1xuICB0aGlzLmNvbnRlbnRfID0gb3B0X29wdHMuY29udGVudCB8fCBcIlwiO1xuICB0aGlzLmRpc2FibGVBdXRvUGFuXyA9IG9wdF9vcHRzLmRpc2FibGVBdXRvUGFuIHx8IGZhbHNlO1xuICB0aGlzLm1heFdpZHRoXyA9IG9wdF9vcHRzLm1heFdpZHRoIHx8IDA7XG4gIHRoaXMucGl4ZWxPZmZzZXRfID0gb3B0X29wdHMucGl4ZWxPZmZzZXQgfHwgbmV3IGdvb2dsZS5tYXBzLlNpemUoMCwgMCk7XG4gIHRoaXMucG9zaXRpb25fID0gb3B0X29wdHMucG9zaXRpb24gfHwgbmV3IGdvb2dsZS5tYXBzLkxhdExuZygwLCAwKTtcbiAgdGhpcy56SW5kZXhfID0gb3B0X29wdHMuekluZGV4IHx8IG51bGw7XG5cbiAgLy8gQWRkaXRpb25hbCBvcHRpb25zICh1bmlxdWUgdG8gSW5mb0JveCk6XG4gIC8vXG4gIHRoaXMuYm94Q2xhc3NfID0gb3B0X29wdHMuYm94Q2xhc3MgfHwgXCJpbmZvQm94XCI7XG4gIHRoaXMuYm94U3R5bGVfID0gb3B0X29wdHMuYm94U3R5bGUgfHwge307XG4gIHRoaXMuY2xvc2VCb3hNYXJnaW5fID0gb3B0X29wdHMuY2xvc2VCb3hNYXJnaW4gfHwgXCIycHhcIjtcbiAgdGhpcy5jbG9zZUJveFVSTF8gPSBvcHRfb3B0cy5jbG9zZUJveFVSTCB8fCBcImh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9pbnRsL2VuX3VzL21hcGZpbGVzL2Nsb3NlLmdpZlwiO1xuICBpZiAob3B0X29wdHMuY2xvc2VCb3hVUkwgPT09IFwiXCIpIHtcbiAgICB0aGlzLmNsb3NlQm94VVJMXyA9IFwiXCI7XG4gIH1cbiAgdGhpcy5pbmZvQm94Q2xlYXJhbmNlXyA9IG9wdF9vcHRzLmluZm9Cb3hDbGVhcmFuY2UgfHwgbmV3IGdvb2dsZS5tYXBzLlNpemUoMSwgMSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRfb3B0cy52aXNpYmxlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRfb3B0cy5pc0hpZGRlbiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgb3B0X29wdHMudmlzaWJsZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdF9vcHRzLnZpc2libGUgPSAhb3B0X29wdHMuaXNIaWRkZW47XG4gICAgfVxuICB9XG4gIHRoaXMuaXNIaWRkZW5fID0gIW9wdF9vcHRzLnZpc2libGU7XG5cbiAgdGhpcy5hbGlnbkJvdHRvbV8gPSBvcHRfb3B0cy5hbGlnbkJvdHRvbSB8fCBmYWxzZTtcbiAgdGhpcy5wYW5lXyA9IG9wdF9vcHRzLnBhbmUgfHwgXCJmbG9hdFBhbmVcIjtcbiAgdGhpcy5lbmFibGVFdmVudFByb3BhZ2F0aW9uXyA9IG9wdF9vcHRzLmVuYWJsZUV2ZW50UHJvcGFnYXRpb24gfHwgZmFsc2U7XG5cbiAgdGhpcy5kaXZfID0gbnVsbDtcbiAgdGhpcy5jbG9zZUxpc3RlbmVyXyA9IG51bGw7XG4gIHRoaXMubW92ZUxpc3RlbmVyXyA9IG51bGw7XG4gIHRoaXMubWFwTGlzdGVuZXJfID0gbnVsbDtcbiAgdGhpcy5jb250ZXh0TGlzdGVuZXJfID0gbnVsbDtcbiAgdGhpcy5ldmVudExpc3RlbmVyc18gPSBudWxsO1xuICB0aGlzLmZpeGVkV2lkdGhTZXRfID0gbnVsbDtcbn1cblxuLyogSW5mb0JveCBleHRlbmRzIE92ZXJsYXlWaWV3IGluIHRoZSBHb29nbGUgTWFwcyBBUEkgdjMuXG4gKi9cbkluZm9Cb3gucHJvdG90eXBlID0gbmV3IGdvb2dsZS5tYXBzLk92ZXJsYXlWaWV3KCk7XG5cbi8qKlxuICogQ3JlYXRlcyB0aGUgRElWIHJlcHJlc2VudGluZyB0aGUgSW5mb0JveC5cbiAqIEBwcml2YXRlXG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLmNyZWF0ZUluZm9Cb3hEaXZfID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBpO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgYnc7XG4gIHZhciBtZSA9IHRoaXM7XG5cbiAgLy8gVGhpcyBoYW5kbGVyIHByZXZlbnRzIGFuIGV2ZW50IGluIHRoZSBJbmZvQm94IGZyb20gYmVpbmcgcGFzc2VkIG9uIHRvIHRoZSBtYXAuXG4gIC8vXG4gIHZhciBjYW5jZWxIYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGlzIGhhbmRsZXIgaWdub3JlcyB0aGUgY3VycmVudCBldmVudCBpbiB0aGUgSW5mb0JveCBhbmQgY29uZGl0aW9uYWxseSBwcmV2ZW50c1xuICAvLyB0aGUgZXZlbnQgZnJvbSBiZWluZyBwYXNzZWQgb24gdG8gdGhlIG1hcC4gSXQgaXMgdXNlZCBmb3IgdGhlIGNvbnRleHRtZW51IGV2ZW50LlxuICAvL1xuICB2YXIgaWdub3JlSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG5cbiAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkge1xuXG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKCFtZS5lbmFibGVFdmVudFByb3BhZ2F0aW9uXykge1xuXG4gICAgICBjYW5jZWxIYW5kbGVyKGUpO1xuICAgIH1cbiAgfTtcblxuICBpZiAoIXRoaXMuZGl2Xykge1xuXG4gICAgdGhpcy5kaXZfID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgIHRoaXMuc2V0Qm94U3R5bGVfKCk7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMuY29udGVudF8ubm9kZVR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuZGl2Xy5pbm5lckhUTUwgPSB0aGlzLmdldENsb3NlQm94SW1nXygpICsgdGhpcy5jb250ZW50XztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXZfLmlubmVySFRNTCA9IHRoaXMuZ2V0Q2xvc2VCb3hJbWdfKCk7XG4gICAgICB0aGlzLmRpdl8uYXBwZW5kQ2hpbGQodGhpcy5jb250ZW50Xyk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBJbmZvQm94IERJViB0byB0aGUgRE9NXG4gICAgdGhpcy5nZXRQYW5lcygpW3RoaXMucGFuZV9dLmFwcGVuZENoaWxkKHRoaXMuZGl2Xyk7XG5cbiAgICB0aGlzLmFkZENsaWNrSGFuZGxlcl8oKTtcblxuICAgIGlmICh0aGlzLmRpdl8uc3R5bGUud2lkdGgpIHtcblxuICAgICAgdGhpcy5maXhlZFdpZHRoU2V0XyA9IHRydWU7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICBpZiAodGhpcy5tYXhXaWR0aF8gIT09IDAgJiYgdGhpcy5kaXZfLm9mZnNldFdpZHRoID4gdGhpcy5tYXhXaWR0aF8pIHtcblxuICAgICAgICB0aGlzLmRpdl8uc3R5bGUud2lkdGggPSB0aGlzLm1heFdpZHRoXztcbiAgICAgICAgdGhpcy5maXhlZFdpZHRoU2V0XyA9IHRydWU7XG5cbiAgICAgIH0gZWxzZSB7IC8vIFRoZSBmb2xsb3dpbmcgY29kZSBpcyBuZWVkZWQgdG8gb3ZlcmNvbWUgcHJvYmxlbXMgd2l0aCBNU0lFXG5cbiAgICAgICAgYncgPSB0aGlzLmdldEJveFdpZHRoc18oKTtcblxuICAgICAgICB0aGlzLmRpdl8uc3R5bGUud2lkdGggPSAodGhpcy5kaXZfLm9mZnNldFdpZHRoIC0gYncubGVmdCAtIGJ3LnJpZ2h0KSArIFwicHhcIjtcbiAgICAgICAgdGhpcy5maXhlZFdpZHRoU2V0XyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMucGFuQm94Xyh0aGlzLmRpc2FibGVBdXRvUGFuXyk7XG5cbiAgICBpZiAoIXRoaXMuZW5hYmxlRXZlbnRQcm9wYWdhdGlvbl8pIHtcblxuICAgICAgdGhpcy5ldmVudExpc3RlbmVyc18gPSBbXTtcblxuICAgICAgLy8gQ2FuY2VsIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAgICAgLy9cbiAgICAgIC8vIE5vdGU6IG1vdXNlbW92ZSBub3QgaW5jbHVkZWQgKHRvIHJlc29sdmUgSXNzdWUgMTUyKVxuICAgICAgZXZlbnRzID0gW1wibW91c2Vkb3duXCIsIFwibW91c2VvdmVyXCIsIFwibW91c2VvdXRcIiwgXCJtb3VzZXVwXCIsXG4gICAgICBcImNsaWNrXCIsIFwiZGJsY2xpY2tcIiwgXCJ0b3VjaHN0YXJ0XCIsIFwidG91Y2hlbmRcIiwgXCJ0b3VjaG1vdmVcIl07XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzXy5wdXNoKGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHRoaXMuZGl2XywgZXZlbnRzW2ldLCBjYW5jZWxIYW5kbGVyKSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIEdvb2dsZSBidWcgdGhhdCBjYXVzZXMgdGhlIGN1cnNvciB0byBjaGFuZ2UgdG8gYSBwb2ludGVyXG4gICAgICAvLyB3aGVuIHRoZSBtb3VzZSBtb3ZlcyBvdmVyIGEgbWFya2VyIHVuZGVybmVhdGggSW5mb0JveC5cbiAgICAgIHRoaXMuZXZlbnRMaXN0ZW5lcnNfLnB1c2goZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIodGhpcy5kaXZfLCBcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB0aGlzLnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dExpc3RlbmVyXyA9IGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHRoaXMuZGl2XywgXCJjb250ZXh0bWVudVwiLCBpZ25vcmVIYW5kbGVyKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgRElWIGNvbnRhaW5pbmcgdGhlIEluZm9Cb3gncyBjb250ZW50IGlzIGF0dGFjaGVkIHRvIHRoZSBET00uXG4gICAgICogQG5hbWUgSW5mb0JveCNkb21yZWFkeVxuICAgICAqIEBldmVudFxuICAgICAqL1xuICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgXCJkb21yZWFkeVwiKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBIVE1MIDxJTUc+IHRhZyBmb3IgdGhlIGNsb3NlIGJveC5cbiAqIEBwcml2YXRlXG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLmdldENsb3NlQm94SW1nXyA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgaW1nID0gXCJcIjtcblxuICBpZiAodGhpcy5jbG9zZUJveFVSTF8gIT09IFwiXCIpIHtcblxuICAgIGltZyAgPSBcIjxpbWdcIjtcbiAgICBpbWcgKz0gXCIgc3JjPSdcIiArIHRoaXMuY2xvc2VCb3hVUkxfICsgXCInXCI7XG4gICAgaW1nICs9IFwiIGFsaWduPXJpZ2h0XCI7IC8vIERvIHRoaXMgYmVjYXVzZSBPcGVyYSBjaG9rZXMgb24gc3R5bGU9J2Zsb2F0OiByaWdodDsnXG4gICAgaW1nICs9IFwiIHN0eWxlPSdcIjtcbiAgICBpbWcgKz0gXCIgcG9zaXRpb246IHJlbGF0aXZlO1wiOyAvLyBSZXF1aXJlZCBieSBNU0lFXG4gICAgaW1nICs9IFwiIGN1cnNvcjogcG9pbnRlcjtcIjtcbiAgICBpbWcgKz0gXCIgbWFyZ2luOiBcIiArIHRoaXMuY2xvc2VCb3hNYXJnaW5fICsgXCI7XCI7XG4gICAgaW1nICs9IFwiJz5cIjtcbiAgfVxuXG4gIHJldHVybiBpbWc7XG59O1xuXG4vKipcbiAqIEFkZHMgdGhlIGNsaWNrIGhhbmRsZXIgdG8gdGhlIEluZm9Cb3ggY2xvc2UgYm94LlxuICogQHByaXZhdGVcbiAqL1xuSW5mb0JveC5wcm90b3R5cGUuYWRkQ2xpY2tIYW5kbGVyXyA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgY2xvc2VCb3g7XG5cbiAgaWYgKHRoaXMuY2xvc2VCb3hVUkxfICE9PSBcIlwiKSB7XG5cbiAgICBjbG9zZUJveCA9IHRoaXMuZGl2Xy5maXJzdENoaWxkO1xuICAgIHRoaXMuY2xvc2VMaXN0ZW5lcl8gPSBnb29nbGUubWFwcy5ldmVudC5hZGREb21MaXN0ZW5lcihjbG9zZUJveCwgXCJjbGlja1wiLCB0aGlzLmdldENsb3NlQ2xpY2tIYW5kbGVyXygpKTtcblxuICB9IGVsc2Uge1xuXG4gICAgdGhpcy5jbG9zZUxpc3RlbmVyXyA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgY2xvc2UgYm94IG9mIGFuIEluZm9Cb3guXG4gKiBAcHJpdmF0ZVxuICovXG5JbmZvQm94LnByb3RvdHlwZS5nZXRDbG9zZUNsaWNrSGFuZGxlcl8gPSBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIG1lID0gdGhpcztcblxuICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcblxuICAgIC8vIDEuMC4zIGZpeDogQWx3YXlzIHByZXZlbnQgcHJvcGFnYXRpb24gb2YgYSBjbG9zZSBib3ggY2xpY2sgdG8gdGhlIG1hcDpcbiAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG5cbiAgICBpZiAoZS5zdG9wUHJvcGFnYXRpb24pIHtcblxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIEluZm9Cb3gncyBjbG9zZSBib3ggaXMgY2xpY2tlZC5cbiAgICAgKiBAbmFtZSBJbmZvQm94I2Nsb3NlY2xpY2tcbiAgICAgKiBAZXZlbnRcbiAgICAgKi9cbiAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKG1lLCBcImNsb3NlY2xpY2tcIik7XG5cbiAgICBtZS5jbG9zZSgpO1xuICB9O1xufTtcblxuLyoqXG4gKiBQYW5zIHRoZSBtYXAgc28gdGhhdCB0aGUgSW5mb0JveCBhcHBlYXJzIGVudGlyZWx5IHdpdGhpbiB0aGUgbWFwJ3MgdmlzaWJsZSBhcmVhLlxuICogQHByaXZhdGVcbiAqL1xuSW5mb0JveC5wcm90b3R5cGUucGFuQm94XyA9IGZ1bmN0aW9uIChkaXNhYmxlUGFuKSB7XG5cbiAgdmFyIG1hcDtcbiAgdmFyIGJvdW5kcztcbiAgdmFyIHhPZmZzZXQgPSAwLCB5T2Zmc2V0ID0gMDtcblxuICBpZiAoIWRpc2FibGVQYW4pIHtcblxuICAgIG1hcCA9IHRoaXMuZ2V0TWFwKCk7XG5cbiAgICBpZiAobWFwIGluc3RhbmNlb2YgZ29vZ2xlLm1hcHMuTWFwKSB7IC8vIE9ubHkgcGFuIGlmIGF0dGFjaGVkIHRvIG1hcCwgbm90IHBhbm9yYW1hXG5cbiAgICAgIGlmICghbWFwLmdldEJvdW5kcygpLmNvbnRhaW5zKHRoaXMucG9zaXRpb25fKSkge1xuICAgICAgLy8gTWFya2VyIG5vdCBpbiB2aXNpYmxlIGFyZWEgb2YgbWFwLCBzbyBzZXQgY2VudGVyXG4gICAgICAvLyBvZiBtYXAgdG8gdGhlIG1hcmtlciBwb3NpdGlvbiBmaXJzdC5cbiAgICAgICAgbWFwLnNldENlbnRlcih0aGlzLnBvc2l0aW9uXyk7XG4gICAgICB9XG5cbiAgICAgIGJvdW5kcyA9IG1hcC5nZXRCb3VuZHMoKTtcblxuICAgICAgdmFyIG1hcERpdiA9IG1hcC5nZXREaXYoKTtcbiAgICAgIHZhciBtYXBXaWR0aCA9IG1hcERpdi5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBtYXBIZWlnaHQgPSBtYXBEaXYub2Zmc2V0SGVpZ2h0O1xuICAgICAgdmFyIGl3T2Zmc2V0WCA9IHRoaXMucGl4ZWxPZmZzZXRfLndpZHRoO1xuICAgICAgdmFyIGl3T2Zmc2V0WSA9IHRoaXMucGl4ZWxPZmZzZXRfLmhlaWdodDtcbiAgICAgIHZhciBpd1dpZHRoID0gdGhpcy5kaXZfLm9mZnNldFdpZHRoO1xuICAgICAgdmFyIGl3SGVpZ2h0ID0gdGhpcy5kaXZfLm9mZnNldEhlaWdodDtcbiAgICAgIHZhciBwYWRYID0gdGhpcy5pbmZvQm94Q2xlYXJhbmNlXy53aWR0aDtcbiAgICAgIHZhciBwYWRZID0gdGhpcy5pbmZvQm94Q2xlYXJhbmNlXy5oZWlnaHQ7XG4gICAgICB2YXIgcGl4UG9zaXRpb24gPSB0aGlzLmdldFByb2plY3Rpb24oKS5mcm9tTGF0TG5nVG9Db250YWluZXJQaXhlbCh0aGlzLnBvc2l0aW9uXyk7XG5cbiAgICAgIGlmIChwaXhQb3NpdGlvbi54IDwgKC1pd09mZnNldFggKyBwYWRYKSkge1xuICAgICAgICB4T2Zmc2V0ID0gcGl4UG9zaXRpb24ueCArIGl3T2Zmc2V0WCAtIHBhZFg7XG4gICAgICB9IGVsc2UgaWYgKChwaXhQb3NpdGlvbi54ICsgaXdXaWR0aCArIGl3T2Zmc2V0WCArIHBhZFgpID4gbWFwV2lkdGgpIHtcbiAgICAgICAgeE9mZnNldCA9IHBpeFBvc2l0aW9uLnggKyBpd1dpZHRoICsgaXdPZmZzZXRYICsgcGFkWCAtIG1hcFdpZHRoO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYWxpZ25Cb3R0b21fKSB7XG4gICAgICAgIGlmIChwaXhQb3NpdGlvbi55IDwgKC1pd09mZnNldFkgKyBwYWRZICsgaXdIZWlnaHQpKSB7XG4gICAgICAgICAgeU9mZnNldCA9IHBpeFBvc2l0aW9uLnkgKyBpd09mZnNldFkgLSBwYWRZIC0gaXdIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoKHBpeFBvc2l0aW9uLnkgKyBpd09mZnNldFkgKyBwYWRZKSA+IG1hcEhlaWdodCkge1xuICAgICAgICAgIHlPZmZzZXQgPSBwaXhQb3NpdGlvbi55ICsgaXdPZmZzZXRZICsgcGFkWSAtIG1hcEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBpeFBvc2l0aW9uLnkgPCAoLWl3T2Zmc2V0WSArIHBhZFkpKSB7XG4gICAgICAgICAgeU9mZnNldCA9IHBpeFBvc2l0aW9uLnkgKyBpd09mZnNldFkgLSBwYWRZO1xuICAgICAgICB9IGVsc2UgaWYgKChwaXhQb3NpdGlvbi55ICsgaXdIZWlnaHQgKyBpd09mZnNldFkgKyBwYWRZKSA+IG1hcEhlaWdodCkge1xuICAgICAgICAgIHlPZmZzZXQgPSBwaXhQb3NpdGlvbi55ICsgaXdIZWlnaHQgKyBpd09mZnNldFkgKyBwYWRZIC0gbWFwSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghKHhPZmZzZXQgPT09IDAgJiYgeU9mZnNldCA9PT0gMCkpIHtcblxuICAgICAgICAvLyBNb3ZlIHRoZSBtYXAgdG8gdGhlIHNoaWZ0ZWQgY2VudGVyLlxuICAgICAgICAvL1xuICAgICAgICB2YXIgYyA9IG1hcC5nZXRDZW50ZXIoKTtcbiAgICAgICAgbWFwLnBhbkJ5KHhPZmZzZXQsIHlPZmZzZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdHlsZSBvZiB0aGUgSW5mb0JveCBieSBzZXR0aW5nIHRoZSBzdHlsZSBzaGVldCBhbmQgYXBwbHlpbmdcbiAqIG90aGVyIHNwZWNpZmljIHN0eWxlcyByZXF1ZXN0ZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5JbmZvQm94LnByb3RvdHlwZS5zZXRCb3hTdHlsZV8gPSBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIGksIGJveFN0eWxlO1xuXG4gIGlmICh0aGlzLmRpdl8pIHtcblxuICAgIC8vIEFwcGx5IHN0eWxlIHZhbHVlcyBmcm9tIHRoZSBzdHlsZSBzaGVldCBkZWZpbmVkIGluIHRoZSBib3hDbGFzcyBwYXJhbWV0ZXI6XG4gICAgdGhpcy5kaXZfLmNsYXNzTmFtZSA9IHRoaXMuYm94Q2xhc3NfO1xuXG4gICAgLy8gQ2xlYXIgZXhpc3RpbmcgaW5saW5lIHN0eWxlIHZhbHVlczpcbiAgICB0aGlzLmRpdl8uc3R5bGUuY3NzVGV4dCA9IFwiXCI7XG5cbiAgICAvLyBBcHBseSBzdHlsZSB2YWx1ZXMgZGVmaW5lZCBpbiB0aGUgYm94U3R5bGUgcGFyYW1ldGVyOlxuICAgIGJveFN0eWxlID0gdGhpcy5ib3hTdHlsZV87XG4gICAgZm9yIChpIGluIGJveFN0eWxlKSB7XG5cbiAgICAgIGlmIChib3hTdHlsZS5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXG4gICAgICAgIHRoaXMuZGl2Xy5zdHlsZVtpXSA9IGJveFN0eWxlW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpeCBmb3IgaU9TIGRpc2FwcGVhcmluZyBJbmZvQm94IHByb2JsZW0uXG4gICAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvOTIyOTUzNS9nb29nbGUtbWFwcy1tYXJrZXJzLWRpc2FwcGVhci1hdC1jZXJ0YWluLXpvb20tbGV2ZWwtb25seS1vbi1pcGhvbmUtaXBhZFxuICAgIHRoaXMuZGl2Xy5zdHlsZS5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZVooMClcIjtcblxuICAgIC8vIEZpeCB1cCBvcGFjaXR5IHN0eWxlIGZvciBiZW5lZml0IG9mIE1TSUU6XG4gICAgLy9cbiAgICBpZiAodHlwZW9mIHRoaXMuZGl2Xy5zdHlsZS5vcGFjaXR5ICE9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMuZGl2Xy5zdHlsZS5vcGFjaXR5ICE9PSBcIlwiKSB7XG4gICAgICAvLyBTZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9jc3Mvb3BhY2l0eS5odG1sXG4gICAgICB0aGlzLmRpdl8uc3R5bGUuTXNGaWx0ZXIgPSBcIlxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT1cIiArICh0aGlzLmRpdl8uc3R5bGUub3BhY2l0eSAqIDEwMCkgKyBcIilcXFwiXCI7XG4gICAgICB0aGlzLmRpdl8uc3R5bGUuZmlsdGVyID0gXCJhbHBoYShvcGFjaXR5PVwiICsgKHRoaXMuZGl2Xy5zdHlsZS5vcGFjaXR5ICogMTAwKSArIFwiKVwiO1xuICAgIH1cblxuICAgIC8vIEFwcGx5IHJlcXVpcmVkIHN0eWxlczpcbiAgICAvL1xuICAgIHRoaXMuZGl2Xy5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICB0aGlzLmRpdl8uc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIGlmICh0aGlzLnpJbmRleF8gIT09IG51bGwpIHtcblxuICAgICAgdGhpcy5kaXZfLnN0eWxlLnpJbmRleCA9IHRoaXMuekluZGV4XztcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRpdl8uc3R5bGUub3ZlcmZsb3cpIHtcbiAgICAgIHRoaXMuZGl2Xy5zdHlsZS5vdmVyZmxvdyA9IFwiYXV0b1wiO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIHdpZHRocyBvZiB0aGUgYm9yZGVycyBvZiB0aGUgSW5mb0JveC5cbiAqIEBwcml2YXRlXG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpZHRocyBvYmplY3QgKHRvcCwgYm90dG9tIGxlZnQsIHJpZ2h0KVxuICovXG5JbmZvQm94LnByb3RvdHlwZS5nZXRCb3hXaWR0aHNfID0gZnVuY3Rpb24gKCkge1xuXG4gIHZhciBjb21wdXRlZFN0eWxlO1xuICB2YXIgYncgPSB7dG9wOiAwLCBib3R0b206IDAsIGxlZnQ6IDAsIHJpZ2h0OiAwfTtcbiAgdmFyIGJveCA9IHRoaXMuZGl2XztcblxuICBpZiAoZG9jdW1lbnQuZGVmYXVsdFZpZXcgJiYgZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuXG4gICAgY29tcHV0ZWRTdHlsZSA9IGJveC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoYm94LCBcIlwiKTtcblxuICAgIGlmIChjb21wdXRlZFN0eWxlKSB7XG5cbiAgICAgIC8vIFRoZSBjb21wdXRlZCBzdHlsZXMgYXJlIGFsd2F5cyBpbiBwaXhlbCB1bml0cyAoZ29vZCEpXG4gICAgICBidy50b3AgPSBwYXJzZUludChjb21wdXRlZFN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCkgfHwgMDtcbiAgICAgIGJ3LmJvdHRvbSA9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwKSB8fCAwO1xuICAgICAgYncubGVmdCA9IHBhcnNlSW50KGNvbXB1dGVkU3R5bGUuYm9yZGVyTGVmdFdpZHRoLCAxMCkgfHwgMDtcbiAgICAgIGJ3LnJpZ2h0ID0gcGFyc2VJbnQoY29tcHV0ZWRTdHlsZS5ib3JkZXJSaWdodFdpZHRoLCAxMCkgfHwgMDtcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY3VycmVudFN0eWxlKSB7IC8vIE1TSUVcblxuICAgIGlmIChib3guY3VycmVudFN0eWxlKSB7XG5cbiAgICAgIC8vIFRoZSBjdXJyZW50IHN0eWxlcyBtYXkgbm90IGJlIGluIHBpeGVsIHVuaXRzLCBidXQgYXNzdW1lIHRoZXkgYXJlIChiYWQhKVxuICAgICAgYncudG9wID0gcGFyc2VJbnQoYm94LmN1cnJlbnRTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTApIHx8IDA7XG4gICAgICBidy5ib3R0b20gPSBwYXJzZUludChib3guY3VycmVudFN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCkgfHwgMDtcbiAgICAgIGJ3LmxlZnQgPSBwYXJzZUludChib3guY3VycmVudFN0eWxlLmJvcmRlckxlZnRXaWR0aCwgMTApIHx8IDA7XG4gICAgICBidy5yaWdodCA9IHBhcnNlSW50KGJveC5jdXJyZW50U3R5bGUuYm9yZGVyUmlnaHRXaWR0aCwgMTApIHx8IDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ3O1xufTtcblxuLyoqXG4gKiBJbnZva2VkIHdoZW4gPHR0PmNsb3NlPC90dD4gaXMgY2FsbGVkLiBEbyBub3QgY2FsbCBpdCBkaXJlY3RseS5cbiAqL1xuSW5mb0JveC5wcm90b3R5cGUub25SZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgaWYgKHRoaXMuZGl2Xykge1xuXG4gICAgdGhpcy5kaXZfLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5kaXZfKTtcbiAgICB0aGlzLmRpdl8gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIERyYXdzIHRoZSBJbmZvQm94IGJhc2VkIG9uIHRoZSBjdXJyZW50IG1hcCBwcm9qZWN0aW9uIGFuZCB6b29tIGxldmVsLlxuICovXG5JbmZvQm94LnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKCkge1xuXG4gIHRoaXMuY3JlYXRlSW5mb0JveERpdl8oKTtcblxuICB2YXIgcGl4UG9zaXRpb24gPSB0aGlzLmdldFByb2plY3Rpb24oKS5mcm9tTGF0TG5nVG9EaXZQaXhlbCh0aGlzLnBvc2l0aW9uXyk7XG5cbiAgdGhpcy5kaXZfLnN0eWxlLmxlZnQgPSAocGl4UG9zaXRpb24ueCArIHRoaXMucGl4ZWxPZmZzZXRfLndpZHRoKSArIFwicHhcIjtcbiAgXG4gIGlmICh0aGlzLmFsaWduQm90dG9tXykge1xuICAgIHRoaXMuZGl2Xy5zdHlsZS5ib3R0b20gPSAtKHBpeFBvc2l0aW9uLnkgKyB0aGlzLnBpeGVsT2Zmc2V0Xy5oZWlnaHQpICsgXCJweFwiO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGl2Xy5zdHlsZS50b3AgPSAocGl4UG9zaXRpb24ueSArIHRoaXMucGl4ZWxPZmZzZXRfLmhlaWdodCkgKyBcInB4XCI7XG4gIH1cblxuICBpZiAodGhpcy5pc0hpZGRlbl8pIHtcblxuICAgIHRoaXMuZGl2Xy5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcblxuICB9IGVsc2Uge1xuXG4gICAgdGhpcy5kaXZfLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBvcHRpb25zIGZvciB0aGUgSW5mb0JveC4gTm90ZSB0aGF0IGNoYW5nZXMgdG8gdGhlIDx0dD5tYXhXaWR0aDwvdHQ+LFxuICogIDx0dD5jbG9zZUJveE1hcmdpbjwvdHQ+LCA8dHQ+Y2xvc2VCb3hVUkw8L3R0PiwgYW5kIDx0dD5lbmFibGVFdmVudFByb3BhZ2F0aW9uPC90dD5cbiAqICBwcm9wZXJ0aWVzIGhhdmUgbm8gYWZmZWN0IHVudGlsIHRoZSBjdXJyZW50IEluZm9Cb3ggaXMgPHR0PmNsb3NlPC90dD5kIGFuZCBhIG5ldyBvbmVcbiAqICBpcyA8dHQ+b3BlbjwvdHQ+ZWQuXG4gKiBAcGFyYW0ge0luZm9Cb3hPcHRpb25zfSBvcHRfb3B0c1xuICovXG5JbmZvQm94LnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gKG9wdF9vcHRzKSB7XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMuYm94Q2xhc3MgIT09IFwidW5kZWZpbmVkXCIpIHsgLy8gTXVzdCBiZSBmaXJzdFxuXG4gICAgdGhpcy5ib3hDbGFzc18gPSBvcHRfb3B0cy5ib3hDbGFzcztcbiAgICB0aGlzLnNldEJveFN0eWxlXygpO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMuYm94U3R5bGUgIT09IFwidW5kZWZpbmVkXCIpIHsgLy8gTXVzdCBiZSBzZWNvbmRcblxuICAgIHRoaXMuYm94U3R5bGVfID0gb3B0X29wdHMuYm94U3R5bGU7XG4gICAgdGhpcy5zZXRCb3hTdHlsZV8oKTtcbiAgfVxuICBpZiAodHlwZW9mIG9wdF9vcHRzLmNvbnRlbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgIHRoaXMuc2V0Q29udGVudChvcHRfb3B0cy5jb250ZW50KTtcbiAgfVxuICBpZiAodHlwZW9mIG9wdF9vcHRzLmRpc2FibGVBdXRvUGFuICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICB0aGlzLmRpc2FibGVBdXRvUGFuXyA9IG9wdF9vcHRzLmRpc2FibGVBdXRvUGFuO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMubWF4V2lkdGggIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgIHRoaXMubWF4V2lkdGhfID0gb3B0X29wdHMubWF4V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRfb3B0cy5waXhlbE9mZnNldCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgdGhpcy5waXhlbE9mZnNldF8gPSBvcHRfb3B0cy5waXhlbE9mZnNldDtcbiAgfVxuICBpZiAodHlwZW9mIG9wdF9vcHRzLmFsaWduQm90dG9tICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICB0aGlzLmFsaWduQm90dG9tXyA9IG9wdF9vcHRzLmFsaWduQm90dG9tO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMucG9zaXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgIHRoaXMuc2V0UG9zaXRpb24ob3B0X29wdHMucG9zaXRpb24pO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMuekluZGV4ICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICB0aGlzLnNldFpJbmRleChvcHRfb3B0cy56SW5kZXgpO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMuY2xvc2VCb3hNYXJnaW4gIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgIHRoaXMuY2xvc2VCb3hNYXJnaW5fID0gb3B0X29wdHMuY2xvc2VCb3hNYXJnaW47XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRfb3B0cy5jbG9zZUJveFVSTCAhPT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgdGhpcy5jbG9zZUJveFVSTF8gPSBvcHRfb3B0cy5jbG9zZUJveFVSTDtcbiAgfVxuICBpZiAodHlwZW9mIG9wdF9vcHRzLmluZm9Cb3hDbGVhcmFuY2UgIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgIHRoaXMuaW5mb0JveENsZWFyYW5jZV8gPSBvcHRfb3B0cy5pbmZvQm94Q2xlYXJhbmNlO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMuaXNIaWRkZW4gIT09IFwidW5kZWZpbmVkXCIpIHtcblxuICAgIHRoaXMuaXNIaWRkZW5fID0gb3B0X29wdHMuaXNIaWRkZW47XG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRfb3B0cy52aXNpYmxlICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cbiAgICB0aGlzLmlzSGlkZGVuXyA9ICFvcHRfb3B0cy52aXNpYmxlO1xuICB9XG4gIGlmICh0eXBlb2Ygb3B0X29wdHMuZW5hYmxlRXZlbnRQcm9wYWdhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuXG4gICAgdGhpcy5lbmFibGVFdmVudFByb3BhZ2F0aW9uXyA9IG9wdF9vcHRzLmVuYWJsZUV2ZW50UHJvcGFnYXRpb247XG4gIH1cblxuICBpZiAodGhpcy5kaXZfKSB7XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBjb250ZW50IG9mIHRoZSBJbmZvQm94LlxuICogIFRoZSBjb250ZW50IGNhbiBiZSBwbGFpbiB0ZXh0IG9yIGFuIEhUTUwgRE9NIG5vZGUuXG4gKiBAcGFyYW0ge3N0cmluZ3xOb2RlfSBjb250ZW50XG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICB0aGlzLmNvbnRlbnRfID0gY29udGVudDtcblxuICBpZiAodGhpcy5kaXZfKSB7XG5cbiAgICBpZiAodGhpcy5jbG9zZUxpc3RlbmVyXykge1xuXG4gICAgICBnb29nbGUubWFwcy5ldmVudC5yZW1vdmVMaXN0ZW5lcih0aGlzLmNsb3NlTGlzdGVuZXJfKTtcbiAgICAgIHRoaXMuY2xvc2VMaXN0ZW5lcl8gPSBudWxsO1xuICAgIH1cblxuICAgIC8vIE9kZCBjb2RlIHJlcXVpcmVkIHRvIG1ha2UgdGhpbmdzIHdvcmsgd2l0aCBNU0lFLlxuICAgIC8vXG4gICAgaWYgKCF0aGlzLmZpeGVkV2lkdGhTZXRfKSB7XG5cbiAgICAgIHRoaXMuZGl2Xy5zdHlsZS53aWR0aCA9IFwiXCI7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb250ZW50Lm5vZGVUeXBlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLmRpdl8uaW5uZXJIVE1MID0gdGhpcy5nZXRDbG9zZUJveEltZ18oKSArIGNvbnRlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGl2Xy5pbm5lckhUTUwgPSB0aGlzLmdldENsb3NlQm94SW1nXygpO1xuICAgICAgdGhpcy5kaXZfLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIH1cblxuICAgIC8vIFBlcnZlcnNlIGNvZGUgcmVxdWlyZWQgdG8gbWFrZSB0aGluZ3Mgd29yayB3aXRoIE1TSUUuXG4gICAgLy8gKEVuc3VyZXMgdGhlIGNsb3NlIGJveCBkb2VzLCBpbiBmYWN0LCBmbG9hdCB0byB0aGUgcmlnaHQuKVxuICAgIC8vXG4gICAgaWYgKCF0aGlzLmZpeGVkV2lkdGhTZXRfKSB7XG4gICAgICB0aGlzLmRpdl8uc3R5bGUud2lkdGggPSB0aGlzLmRpdl8ub2Zmc2V0V2lkdGggKyBcInB4XCI7XG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQubm9kZVR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhpcy5kaXZfLmlubmVySFRNTCA9IHRoaXMuZ2V0Q2xvc2VCb3hJbWdfKCkgKyBjb250ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kaXZfLmlubmVySFRNTCA9IHRoaXMuZ2V0Q2xvc2VCb3hJbWdfKCk7XG4gICAgICAgIHRoaXMuZGl2Xy5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmFkZENsaWNrSGFuZGxlcl8oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIGNvbnRlbnQgb2YgdGhlIEluZm9Cb3ggY2hhbmdlcy5cbiAgICogQG5hbWUgSW5mb0JveCNjb250ZW50X2NoYW5nZWRcbiAgICogQGV2ZW50XG4gICAqL1xuICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMsIFwiY29udGVudF9jaGFuZ2VkXCIpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSBnZW9ncmFwaGljIGxvY2F0aW9uIG9mIHRoZSBJbmZvQm94LlxuICogQHBhcmFtIHtMYXRMbmd9IGxhdGxuZ1xuICovXG5JbmZvQm94LnByb3RvdHlwZS5zZXRQb3NpdGlvbiA9IGZ1bmN0aW9uIChsYXRsbmcpIHtcblxuICB0aGlzLnBvc2l0aW9uXyA9IGxhdGxuZztcblxuICBpZiAodGhpcy5kaXZfKSB7XG5cbiAgICB0aGlzLmRyYXcoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHBvc2l0aW9uIG9mIHRoZSBJbmZvQm94IGNoYW5nZXMuXG4gICAqIEBuYW1lIEluZm9Cb3gjcG9zaXRpb25fY2hhbmdlZFxuICAgKiBAZXZlbnRcbiAgICovXG4gIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgXCJwb3NpdGlvbl9jaGFuZ2VkXCIpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB6SW5kZXggc3R5bGUgZm9yIHRoZSBJbmZvQm94LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLnNldFpJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuXG4gIHRoaXMuekluZGV4XyA9IGluZGV4O1xuXG4gIGlmICh0aGlzLmRpdl8pIHtcblxuICAgIHRoaXMuZGl2Xy5zdHlsZS56SW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHpJbmRleCBvZiB0aGUgSW5mb0JveCBjaGFuZ2VzLlxuICAgKiBAbmFtZSBJbmZvQm94I3ppbmRleF9jaGFuZ2VkXG4gICAqIEBldmVudFxuICAgKi9cbiAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcih0aGlzLCBcInppbmRleF9jaGFuZ2VkXCIpO1xufTtcblxuLyoqXG4gKiBTZXRzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBJbmZvQm94LlxuICogQHBhcmFtIHtib29sZWFufSBpc1Zpc2libGVcbiAqL1xuSW5mb0JveC5wcm90b3R5cGUuc2V0VmlzaWJsZSA9IGZ1bmN0aW9uIChpc1Zpc2libGUpIHtcblxuICB0aGlzLmlzSGlkZGVuXyA9ICFpc1Zpc2libGU7XG4gIGlmICh0aGlzLmRpdl8pIHtcbiAgICB0aGlzLmRpdl8uc3R5bGUudmlzaWJpbGl0eSA9ICh0aGlzLmlzSGlkZGVuXyA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29udGVudCBvZiB0aGUgSW5mb0JveC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgcmV0dXJuIHRoaXMuY29udGVudF87XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGdlb2dyYXBoaWMgbG9jYXRpb24gb2YgdGhlIEluZm9Cb3guXG4gKiBAcmV0dXJucyB7TGF0TG5nfVxuICovXG5JbmZvQm94LnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcblxuICByZXR1cm4gdGhpcy5wb3NpdGlvbl87XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHpJbmRleCBmb3IgdGhlIEluZm9Cb3guXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5JbmZvQm94LnByb3RvdHlwZS5nZXRaSW5kZXggPSBmdW5jdGlvbiAoKSB7XG5cbiAgcmV0dXJuIHRoaXMuekluZGV4Xztcbn07XG5cbi8qKlxuICogUmV0dXJucyBhIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBJbmZvQm94IGlzIHZpc2libGUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuSW5mb0JveC5wcm90b3R5cGUuZ2V0VmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgaXNWaXNpYmxlO1xuXG4gIGlmICgodHlwZW9mIHRoaXMuZ2V0TWFwKCkgPT09IFwidW5kZWZpbmVkXCIpIHx8ICh0aGlzLmdldE1hcCgpID09PSBudWxsKSkge1xuICAgIGlzVmlzaWJsZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIGlzVmlzaWJsZSA9ICF0aGlzLmlzSGlkZGVuXztcbiAgfVxuICByZXR1cm4gaXNWaXNpYmxlO1xufTtcblxuLyoqXG4gKiBTaG93cyB0aGUgSW5mb0JveC4gW0RlcHJlY2F0ZWQ7IHVzZSA8dHQ+c2V0VmlzaWJsZTwvdHQ+IGluc3RlYWQuXVxuICovXG5JbmZvQm94LnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuXG4gIHRoaXMuaXNIaWRkZW5fID0gZmFsc2U7XG4gIGlmICh0aGlzLmRpdl8pIHtcbiAgICB0aGlzLmRpdl8uc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICB9XG59O1xuXG4vKipcbiAqIEhpZGVzIHRoZSBJbmZvQm94LiBbRGVwcmVjYXRlZDsgdXNlIDx0dD5zZXRWaXNpYmxlPC90dD4gaW5zdGVhZC5dXG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG5cbiAgdGhpcy5pc0hpZGRlbl8gPSB0cnVlO1xuICBpZiAodGhpcy5kaXZfKSB7XG4gICAgdGhpcy5kaXZfLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICB9XG59O1xuXG4vKipcbiAqIEFkZHMgdGhlIEluZm9Cb3ggdG8gdGhlIHNwZWNpZmllZCBtYXAgb3IgU3RyZWV0IFZpZXcgcGFub3JhbWEuIElmIDx0dD5hbmNob3I8L3R0PlxuICogICh1c3VhbGx5IGEgPHR0Pmdvb2dsZS5tYXBzLk1hcmtlcjwvdHQ+KSBpcyBzcGVjaWZpZWQsIHRoZSBwb3NpdGlvblxuICogIG9mIHRoZSBJbmZvQm94IGlzIHNldCB0byB0aGUgcG9zaXRpb24gb2YgdGhlIDx0dD5hbmNob3I8L3R0Pi4gSWYgdGhlXG4gKiAgYW5jaG9yIGlzIGRyYWdnZWQgdG8gYSBuZXcgbG9jYXRpb24sIHRoZSBJbmZvQm94IG1vdmVzIGFzIHdlbGwuXG4gKiBAcGFyYW0ge01hcHxTdHJlZXRWaWV3UGFub3JhbWF9IG1hcFxuICogQHBhcmFtIHtNVkNPYmplY3R9IFthbmNob3JdXG4gKi9cbkluZm9Cb3gucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAobWFwLCBhbmNob3IpIHtcblxuICB2YXIgbWUgPSB0aGlzO1xuXG4gIGlmIChhbmNob3IpIHtcblxuICAgIHRoaXMucG9zaXRpb25fID0gYW5jaG9yLmdldFBvc2l0aW9uKCk7XG4gICAgdGhpcy5tb3ZlTGlzdGVuZXJfID0gZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoYW5jaG9yLCBcInBvc2l0aW9uX2NoYW5nZWRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgbWUuc2V0UG9zaXRpb24odGhpcy5nZXRQb3NpdGlvbigpKTtcbiAgICB9KTtcblxuICAgIHRoaXMubWFwTGlzdGVuZXJfID0gZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIoYW5jaG9yLCBcIm1hcF9jaGFuZ2VkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgbWUuc2V0TWFwKHRoaXMubWFwKTtcbiAgICB9KTsgICAgXG4gIH1cblxuICB0aGlzLnNldE1hcChtYXApO1xuXG4gIGlmICh0aGlzLmRpdl8pIHtcblxuICAgIHRoaXMucGFuQm94XygpO1xuICB9XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgdGhlIEluZm9Cb3ggZnJvbSB0aGUgbWFwLlxuICovXG5JbmZvQm94LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuICB2YXIgaTtcblxuICBpZiAodGhpcy5jbG9zZUxpc3RlbmVyXykge1xuXG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQucmVtb3ZlTGlzdGVuZXIodGhpcy5jbG9zZUxpc3RlbmVyXyk7XG4gICAgdGhpcy5jbG9zZUxpc3RlbmVyXyA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5ldmVudExpc3RlbmVyc18pIHtcbiAgICBcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5ldmVudExpc3RlbmVyc18ubGVuZ3RoOyBpKyspIHtcblxuICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQucmVtb3ZlTGlzdGVuZXIodGhpcy5ldmVudExpc3RlbmVyc19baV0pO1xuICAgIH1cbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzXyA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5tb3ZlTGlzdGVuZXJfKSB7XG5cbiAgICBnb29nbGUubWFwcy5ldmVudC5yZW1vdmVMaXN0ZW5lcih0aGlzLm1vdmVMaXN0ZW5lcl8pO1xuICAgIHRoaXMubW92ZUxpc3RlbmVyXyA9IG51bGw7XG4gIH1cblxuICBpZiAodGhpcy5tYXBMaXN0ZW5lcl8pIHtcbiAgICBcbiAgICBnb29nbGUubWFwcy5ldmVudC5yZW1vdmVMaXN0ZW5lcih0aGlzLm1hcExpc3RlbmVyXyk7XG4gICAgdGhpcy5tYXBMaXN0ZW5lcl8gPSBudWxsOyAgICBcbiAgfVxuIFxuICBpZiAodGhpcy5jb250ZXh0TGlzdGVuZXJfKSB7XG5cbiAgICBnb29nbGUubWFwcy5ldmVudC5yZW1vdmVMaXN0ZW5lcih0aGlzLmNvbnRleHRMaXN0ZW5lcl8pO1xuICAgIHRoaXMuY29udGV4dExpc3RlbmVyXyA9IG51bGw7XG4gIH1cblxuICB0aGlzLnNldE1hcChudWxsKTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBJbmZvQm94O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIEQ6L3ZpdGFsaWsvbGF0Y29tL34vZ29vZ2xlLW1hcHMtaW5mb2JveC9pbmZvYm94LW1vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gMTcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///170\n");

/***/ })

});