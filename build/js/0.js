webpackJsonp([0],{

/***/ 167:
/***/ (function(module, exports) {

eval("/**\n * @name InfoBox\n * @version 1.1.13 [March 19, 2014]\n * @author Gary Little (inspired by proof-of-concept code from Pamela Fox of Google)\n * @copyright Copyright 2010 Gary Little [gary at luxcentral.com]\n * @fileoverview InfoBox extends the Google Maps JavaScript API V3 <tt>OverlayView</tt> class.\n *  <p>\n *  An InfoBox behaves like a <tt>google.maps.InfoWindow</tt>, but it supports several\n *  additional properties for advanced styling. An InfoBox can also be used as a map label.\n *  <p>\n *  An InfoBox also fires the same events as a <tt>google.maps.InfoWindow</tt>.\n */\n\n/*!\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jslint browser:true */\n/*global google */\n\n/**\n * @name InfoBoxOptions\n * @class This class represents the optional parameter passed to the {@link InfoBox} constructor.\n * @property {string|Node} content The content of the InfoBox (plain text or an HTML DOM node).\n * @property {boolean} [disableAutoPan=false] Disable auto-pan on <tt>open</tt>.\n * @property {number} maxWidth The maximum width (in pixels) of the InfoBox. Set to 0 if no maximum.\n * @property {Size} pixelOffset The offset (in pixels) from the top left corner of the InfoBox\n *  (or the bottom left corner if the <code>alignBottom</code> property is <code>true</code>)\n *  to the map pixel corresponding to <tt>position</tt>.\n * @property {LatLng} position The geographic location at which to display the InfoBox.\n * @property {number} zIndex The CSS z-index style value for the InfoBox.\n *  Note: This value overrides a zIndex setting specified in the <tt>boxStyle</tt> property.\n * @property {string} [boxClass=\"infoBox\"] The name of the CSS class defining the styles for the InfoBox container.\n * @property {Object} [boxStyle] An object literal whose properties define specific CSS\n *  style values to be applied to the InfoBox. Style values defined here override those that may\n *  be defined in the <code>boxClass</code> style sheet. If this property is changed after the\n *  InfoBox has been created, all previously set styles (except those defined in the style sheet)\n *  are removed from the InfoBox before the new style values are applied.\n * @property {string} closeBoxMargin The CSS margin style value for the close box.\n *  The default is \"2px\" (a 2-pixel margin on all sides).\n * @property {string} closeBoxURL The URL of the image representing the close box.\n *  Note: The default is the URL for Google's standard close box.\n *  Set this property to \"\" if no close box is required.\n * @property {Size} infoBoxClearance Minimum offset (in pixels) from the InfoBox to the\n *  map edge after an auto-pan.\n * @property {boolean} [isHidden=false] Hide the InfoBox on <tt>open</tt>.\n *  [Deprecated in favor of the <tt>visible</tt> property.]\n * @property {boolean} [visible=true] Show the InfoBox on <tt>open</tt>.\n * @property {boolean} alignBottom Align the bottom left corner of the InfoBox to the <code>position</code>\n *  location (default is <tt>false</tt> which means that the top left corner of the InfoBox is aligned).\n * @property {string} pane The pane where the InfoBox is to appear (default is \"floatPane\").\n *  Set the pane to \"mapPane\" if the InfoBox is being used as a map label.\n *  Valid pane names are the property names for the <tt>google.maps.MapPanes</tt> object.\n * @property {boolean} enableEventPropagation Propagate mousedown, mousemove, mouseover, mouseout,\n *  mouseup, click, dblclick, touchstart, touchend, touchmove, and contextmenu events in the InfoBox\n *  (default is <tt>false</tt> to mimic the behavior of a <tt>google.maps.InfoWindow</tt>). Set\n *  this property to <tt>true</tt> if the InfoBox is being used as a map label.\n */\n\n/**\n * Creates an InfoBox with the options specified in {@link InfoBoxOptions}.\n *  Call <tt>InfoBox.open</tt> to add the box to the map.\n * @constructor\n * @param {InfoBoxOptions} [opt_opts]\n */\nfunction InfoBox(opt_opts) {\n\n  opt_opts = opt_opts || {};\n\n  google.maps.OverlayView.apply(this, arguments);\n\n  // Standard options (in common with google.maps.InfoWindow):\n  //\n  this.content_ = opt_opts.content || \"\";\n  this.disableAutoPan_ = opt_opts.disableAutoPan || false;\n  this.maxWidth_ = opt_opts.maxWidth || 0;\n  this.pixelOffset_ = opt_opts.pixelOffset || new google.maps.Size(0, 0);\n  this.position_ = opt_opts.position || new google.maps.LatLng(0, 0);\n  this.zIndex_ = opt_opts.zIndex || null;\n\n  // Additional options (unique to InfoBox):\n  //\n  this.boxClass_ = opt_opts.boxClass || \"infoBox\";\n  this.boxStyle_ = opt_opts.boxStyle || {};\n  this.closeBoxMargin_ = opt_opts.closeBoxMargin || \"2px\";\n  this.closeBoxURL_ = opt_opts.closeBoxURL || \"http://www.google.com/intl/en_us/mapfiles/close.gif\";\n  if (opt_opts.closeBoxURL === \"\") {\n    this.closeBoxURL_ = \"\";\n  }\n  this.infoBoxClearance_ = opt_opts.infoBoxClearance || new google.maps.Size(1, 1);\n\n  if (typeof opt_opts.visible === \"undefined\") {\n    if (typeof opt_opts.isHidden === \"undefined\") {\n      opt_opts.visible = true;\n    } else {\n      opt_opts.visible = !opt_opts.isHidden;\n    }\n  }\n  this.isHidden_ = !opt_opts.visible;\n\n  this.alignBottom_ = opt_opts.alignBottom || false;\n  this.pane_ = opt_opts.pane || \"floatPane\";\n  this.enableEventPropagation_ = opt_opts.enableEventPropagation || false;\n\n  this.div_ = null;\n  this.closeListener_ = null;\n  this.moveListener_ = null;\n  this.mapListener_ = null;\n  this.contextListener_ = null;\n  this.eventListeners_ = null;\n  this.fixedWidthSet_ = null;\n}\n\n/* InfoBox extends OverlayView in the Google Maps API v3.\n */\nInfoBox.prototype = new google.maps.OverlayView();\n\n/**\n * Creates the DIV representing the InfoBox.\n * @private\n */\nInfoBox.prototype.createInfoBoxDiv_ = function () {\n\n  var i;\n  var events;\n  var bw;\n  var me = this;\n\n  // This handler prevents an event in the InfoBox from being passed on to the map.\n  //\n  var cancelHandler = function (e) {\n    e.cancelBubble = true;\n    if (e.stopPropagation) {\n      e.stopPropagation();\n    }\n  };\n\n  // This handler ignores the current event in the InfoBox and conditionally prevents\n  // the event from being passed on to the map. It is used for the contextmenu event.\n  //\n  var ignoreHandler = function (e) {\n\n    e.returnValue = false;\n\n    if (e.preventDefault) {\n\n      e.preventDefault();\n    }\n\n    if (!me.enableEventPropagation_) {\n\n      cancelHandler(e);\n    }\n  };\n\n  if (!this.div_) {\n\n    this.div_ = document.createElement(\"div\");\n\n    this.setBoxStyle_();\n\n    if (typeof this.content_.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + this.content_;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(this.content_);\n    }\n\n    // Add the InfoBox DIV to the DOM\n    this.getPanes()[this.pane_].appendChild(this.div_);\n\n    this.addClickHandler_();\n\n    if (this.div_.style.width) {\n\n      this.fixedWidthSet_ = true;\n\n    } else {\n\n      if (this.maxWidth_ !== 0 && this.div_.offsetWidth > this.maxWidth_) {\n\n        this.div_.style.width = this.maxWidth_;\n        this.fixedWidthSet_ = true;\n\n      } else { // The following code is needed to overcome problems with MSIE\n\n        bw = this.getBoxWidths_();\n\n        this.div_.style.width = (this.div_.offsetWidth - bw.left - bw.right) + \"px\";\n        this.fixedWidthSet_ = false;\n      }\n    }\n\n    this.panBox_(this.disableAutoPan_);\n\n    if (!this.enableEventPropagation_) {\n\n      this.eventListeners_ = [];\n\n      // Cancel event propagation.\n      //\n      // Note: mousemove not included (to resolve Issue 152)\n      events = [\"mousedown\", \"mouseover\", \"mouseout\", \"mouseup\",\n      \"click\", \"dblclick\", \"touchstart\", \"touchend\", \"touchmove\"];\n\n      for (i = 0; i < events.length; i++) {\n\n        this.eventListeners_.push(google.maps.event.addDomListener(this.div_, events[i], cancelHandler));\n      }\n      \n      // Workaround for Google bug that causes the cursor to change to a pointer\n      // when the mouse moves over a marker underneath InfoBox.\n      this.eventListeners_.push(google.maps.event.addDomListener(this.div_, \"mouseover\", function (e) {\n        this.style.cursor = \"default\";\n      }));\n    }\n\n    this.contextListener_ = google.maps.event.addDomListener(this.div_, \"contextmenu\", ignoreHandler);\n\n    /**\n     * This event is fired when the DIV containing the InfoBox's content is attached to the DOM.\n     * @name InfoBox#domready\n     * @event\n     */\n    google.maps.event.trigger(this, \"domready\");\n  }\n};\n\n/**\n * Returns the HTML <IMG> tag for the close box.\n * @private\n */\nInfoBox.prototype.getCloseBoxImg_ = function () {\n\n  var img = \"\";\n\n  if (this.closeBoxURL_ !== \"\") {\n\n    img  = \"<img\";\n    img += \" src='\" + this.closeBoxURL_ + \"'\";\n    img += \" align=right\"; // Do this because Opera chokes on style='float: right;'\n    img += \" style='\";\n    img += \" position: relative;\"; // Required by MSIE\n    img += \" cursor: pointer;\";\n    img += \" margin: \" + this.closeBoxMargin_ + \";\";\n    img += \"'>\";\n  }\n\n  return img;\n};\n\n/**\n * Adds the click handler to the InfoBox close box.\n * @private\n */\nInfoBox.prototype.addClickHandler_ = function () {\n\n  var closeBox;\n\n  if (this.closeBoxURL_ !== \"\") {\n\n    closeBox = this.div_.firstChild;\n    this.closeListener_ = google.maps.event.addDomListener(closeBox, \"click\", this.getCloseClickHandler_());\n\n  } else {\n\n    this.closeListener_ = null;\n  }\n};\n\n/**\n * Returns the function to call when the user clicks the close box of an InfoBox.\n * @private\n */\nInfoBox.prototype.getCloseClickHandler_ = function () {\n\n  var me = this;\n\n  return function (e) {\n\n    // 1.0.3 fix: Always prevent propagation of a close box click to the map:\n    e.cancelBubble = true;\n\n    if (e.stopPropagation) {\n\n      e.stopPropagation();\n    }\n\n    /**\n     * This event is fired when the InfoBox's close box is clicked.\n     * @name InfoBox#closeclick\n     * @event\n     */\n    google.maps.event.trigger(me, \"closeclick\");\n\n    me.close();\n  };\n};\n\n/**\n * Pans the map so that the InfoBox appears entirely within the map's visible area.\n * @private\n */\nInfoBox.prototype.panBox_ = function (disablePan) {\n\n  var map;\n  var bounds;\n  var xOffset = 0, yOffset = 0;\n\n  if (!disablePan) {\n\n    map = this.getMap();\n\n    if (map instanceof google.maps.Map) { // Only pan if attached to map, not panorama\n\n      if (!map.getBounds().contains(this.position_)) {\n      // Marker not in visible area of map, so set center\n      // of map to the marker position first.\n        map.setCenter(this.position_);\n      }\n\n      bounds = map.getBounds();\n\n      var mapDiv = map.getDiv();\n      var mapWidth = mapDiv.offsetWidth;\n      var mapHeight = mapDiv.offsetHeight;\n      var iwOffsetX = this.pixelOffset_.width;\n      var iwOffsetY = this.pixelOffset_.height;\n      var iwWidth = this.div_.offsetWidth;\n      var iwHeight = this.div_.offsetHeight;\n      var padX = this.infoBoxClearance_.width;\n      var padY = this.infoBoxClearance_.height;\n      var pixPosition = this.getProjection().fromLatLngToContainerPixel(this.position_);\n\n      if (pixPosition.x < (-iwOffsetX + padX)) {\n        xOffset = pixPosition.x + iwOffsetX - padX;\n      } else if ((pixPosition.x + iwWidth + iwOffsetX + padX) > mapWidth) {\n        xOffset = pixPosition.x + iwWidth + iwOffsetX + padX - mapWidth;\n      }\n      if (this.alignBottom_) {\n        if (pixPosition.y < (-iwOffsetY + padY + iwHeight)) {\n          yOffset = pixPosition.y + iwOffsetY - padY - iwHeight;\n        } else if ((pixPosition.y + iwOffsetY + padY) > mapHeight) {\n          yOffset = pixPosition.y + iwOffsetY + padY - mapHeight;\n        }\n      } else {\n        if (pixPosition.y < (-iwOffsetY + padY)) {\n          yOffset = pixPosition.y + iwOffsetY - padY;\n        } else if ((pixPosition.y + iwHeight + iwOffsetY + padY) > mapHeight) {\n          yOffset = pixPosition.y + iwHeight + iwOffsetY + padY - mapHeight;\n        }\n      }\n\n      if (!(xOffset === 0 && yOffset === 0)) {\n\n        // Move the map to the shifted center.\n        //\n        var c = map.getCenter();\n        map.panBy(xOffset, yOffset);\n      }\n    }\n  }\n};\n\n/**\n * Sets the style of the InfoBox by setting the style sheet and applying\n * other specific styles requested.\n * @private\n */\nInfoBox.prototype.setBoxStyle_ = function () {\n\n  var i, boxStyle;\n\n  if (this.div_) {\n\n    // Apply style values from the style sheet defined in the boxClass parameter:\n    this.div_.className = this.boxClass_;\n\n    // Clear existing inline style values:\n    this.div_.style.cssText = \"\";\n\n    // Apply style values defined in the boxStyle parameter:\n    boxStyle = this.boxStyle_;\n    for (i in boxStyle) {\n\n      if (boxStyle.hasOwnProperty(i)) {\n\n        this.div_.style[i] = boxStyle[i];\n      }\n    }\n\n    // Fix for iOS disappearing InfoBox problem.\n    // See http://stackoverflow.com/questions/9229535/google-maps-markers-disappear-at-certain-zoom-level-only-on-iphone-ipad\n    this.div_.style.WebkitTransform = \"translateZ(0)\";\n\n    // Fix up opacity style for benefit of MSIE:\n    //\n    if (typeof this.div_.style.opacity !== \"undefined\" && this.div_.style.opacity !== \"\") {\n      // See http://www.quirksmode.org/css/opacity.html\n      this.div_.style.MsFilter = \"\\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + (this.div_.style.opacity * 100) + \")\\\"\";\n      this.div_.style.filter = \"alpha(opacity=\" + (this.div_.style.opacity * 100) + \")\";\n    }\n\n    // Apply required styles:\n    //\n    this.div_.style.position = \"absolute\";\n    this.div_.style.visibility = 'hidden';\n    if (this.zIndex_ !== null) {\n\n      this.div_.style.zIndex = this.zIndex_;\n    }\n    if (!this.div_.style.overflow) {\n      this.div_.style.overflow = \"auto\";\n    }\n  }\n};\n\n/**\n * Get the widths of the borders of the InfoBox.\n * @private\n * @return {Object} widths object (top, bottom left, right)\n */\nInfoBox.prototype.getBoxWidths_ = function () {\n\n  var computedStyle;\n  var bw = {top: 0, bottom: 0, left: 0, right: 0};\n  var box = this.div_;\n\n  if (document.defaultView && document.defaultView.getComputedStyle) {\n\n    computedStyle = box.ownerDocument.defaultView.getComputedStyle(box, \"\");\n\n    if (computedStyle) {\n\n      // The computed styles are always in pixel units (good!)\n      bw.top = parseInt(computedStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(computedStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(computedStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(computedStyle.borderRightWidth, 10) || 0;\n    }\n\n  } else if (document.documentElement.currentStyle) { // MSIE\n\n    if (box.currentStyle) {\n\n      // The current styles may not be in pixel units, but assume they are (bad!)\n      bw.top = parseInt(box.currentStyle.borderTopWidth, 10) || 0;\n      bw.bottom = parseInt(box.currentStyle.borderBottomWidth, 10) || 0;\n      bw.left = parseInt(box.currentStyle.borderLeftWidth, 10) || 0;\n      bw.right = parseInt(box.currentStyle.borderRightWidth, 10) || 0;\n    }\n  }\n\n  return bw;\n};\n\n/**\n * Invoked when <tt>close</tt> is called. Do not call it directly.\n */\nInfoBox.prototype.onRemove = function () {\n\n  if (this.div_) {\n\n    this.div_.parentNode.removeChild(this.div_);\n    this.div_ = null;\n  }\n};\n\n/**\n * Draws the InfoBox based on the current map projection and zoom level.\n */\nInfoBox.prototype.draw = function () {\n\n  this.createInfoBoxDiv_();\n\n  var pixPosition = this.getProjection().fromLatLngToDivPixel(this.position_);\n\n  this.div_.style.left = (pixPosition.x + this.pixelOffset_.width) + \"px\";\n  \n  if (this.alignBottom_) {\n    this.div_.style.bottom = -(pixPosition.y + this.pixelOffset_.height) + \"px\";\n  } else {\n    this.div_.style.top = (pixPosition.y + this.pixelOffset_.height) + \"px\";\n  }\n\n  if (this.isHidden_) {\n\n    this.div_.style.visibility = \"hidden\";\n\n  } else {\n\n    this.div_.style.visibility = \"visible\";\n  }\n};\n\n/**\n * Sets the options for the InfoBox. Note that changes to the <tt>maxWidth</tt>,\n *  <tt>closeBoxMargin</tt>, <tt>closeBoxURL</tt>, and <tt>enableEventPropagation</tt>\n *  properties have no affect until the current InfoBox is <tt>close</tt>d and a new one\n *  is <tt>open</tt>ed.\n * @param {InfoBoxOptions} opt_opts\n */\nInfoBox.prototype.setOptions = function (opt_opts) {\n  if (typeof opt_opts.boxClass !== \"undefined\") { // Must be first\n\n    this.boxClass_ = opt_opts.boxClass;\n    this.setBoxStyle_();\n  }\n  if (typeof opt_opts.boxStyle !== \"undefined\") { // Must be second\n\n    this.boxStyle_ = opt_opts.boxStyle;\n    this.setBoxStyle_();\n  }\n  if (typeof opt_opts.content !== \"undefined\") {\n\n    this.setContent(opt_opts.content);\n  }\n  if (typeof opt_opts.disableAutoPan !== \"undefined\") {\n\n    this.disableAutoPan_ = opt_opts.disableAutoPan;\n  }\n  if (typeof opt_opts.maxWidth !== \"undefined\") {\n\n    this.maxWidth_ = opt_opts.maxWidth;\n  }\n  if (typeof opt_opts.pixelOffset !== \"undefined\") {\n\n    this.pixelOffset_ = opt_opts.pixelOffset;\n  }\n  if (typeof opt_opts.alignBottom !== \"undefined\") {\n\n    this.alignBottom_ = opt_opts.alignBottom;\n  }\n  if (typeof opt_opts.position !== \"undefined\") {\n\n    this.setPosition(opt_opts.position);\n  }\n  if (typeof opt_opts.zIndex !== \"undefined\") {\n\n    this.setZIndex(opt_opts.zIndex);\n  }\n  if (typeof opt_opts.closeBoxMargin !== \"undefined\") {\n\n    this.closeBoxMargin_ = opt_opts.closeBoxMargin;\n  }\n  if (typeof opt_opts.closeBoxURL !== \"undefined\") {\n\n    this.closeBoxURL_ = opt_opts.closeBoxURL;\n  }\n  if (typeof opt_opts.infoBoxClearance !== \"undefined\") {\n\n    this.infoBoxClearance_ = opt_opts.infoBoxClearance;\n  }\n  if (typeof opt_opts.isHidden !== \"undefined\") {\n\n    this.isHidden_ = opt_opts.isHidden;\n  }\n  if (typeof opt_opts.visible !== \"undefined\") {\n\n    this.isHidden_ = !opt_opts.visible;\n  }\n  if (typeof opt_opts.enableEventPropagation !== \"undefined\") {\n\n    this.enableEventPropagation_ = opt_opts.enableEventPropagation;\n  }\n\n  if (this.div_) {\n\n    this.draw();\n  }\n};\n\n/**\n * Sets the content of the InfoBox.\n *  The content can be plain text or an HTML DOM node.\n * @param {string|Node} content\n */\nInfoBox.prototype.setContent = function (content) {\n  this.content_ = content;\n\n  if (this.div_) {\n\n    if (this.closeListener_) {\n\n      google.maps.event.removeListener(this.closeListener_);\n      this.closeListener_ = null;\n    }\n\n    // Odd code required to make things work with MSIE.\n    //\n    if (!this.fixedWidthSet_) {\n\n      this.div_.style.width = \"\";\n    }\n\n    if (typeof content.nodeType === \"undefined\") {\n      this.div_.innerHTML = this.getCloseBoxImg_() + content;\n    } else {\n      this.div_.innerHTML = this.getCloseBoxImg_();\n      this.div_.appendChild(content);\n    }\n\n    // Perverse code required to make things work with MSIE.\n    // (Ensures the close box does, in fact, float to the right.)\n    //\n    if (!this.fixedWidthSet_) {\n      this.div_.style.width = this.div_.offsetWidth + \"px\";\n      if (typeof content.nodeType === \"undefined\") {\n        this.div_.innerHTML = this.getCloseBoxImg_() + content;\n      } else {\n        this.div_.innerHTML = this.getCloseBoxImg_();\n        this.div_.appendChild(content);\n      }\n    }\n\n    this.addClickHandler_();\n  }\n\n  /**\n   * This event is fired when the content of the InfoBox changes.\n   * @name InfoBox#content_changed\n   * @event\n   */\n  google.maps.event.trigger(this, \"content_changed\");\n};\n\n/**\n * Sets the geographic location of the InfoBox.\n * @param {LatLng} latlng\n */\nInfoBox.prototype.setPosition = function (latlng) {\n\n  this.position_ = latlng;\n\n  if (this.div_) {\n\n    this.draw();\n  }\n\n  /**\n   * This event is fired when the position of the InfoBox changes.\n   * @name InfoBox#position_changed\n   * @event\n   */\n  google.maps.event.trigger(this, \"position_changed\");\n};\n\n/**\n * Sets the zIndex style for the InfoBox.\n * @param {number} index\n */\nInfoBox.prototype.setZIndex = function (index) {\n\n  this.zIndex_ = index;\n\n  if (this.div_) {\n\n    this.div_.style.zIndex = index;\n  }\n\n  /**\n   * This event is fired when the zIndex of the InfoBox changes.\n   * @name InfoBox#zindex_changed\n   * @event\n   */\n  google.maps.event.trigger(this, \"zindex_changed\");\n};\n\n/**\n * Sets the visibility of the InfoBox.\n * @param {boolean} isVisible\n */\nInfoBox.prototype.setVisible = function (isVisible) {\n\n  this.isHidden_ = !isVisible;\n  if (this.div_) {\n    this.div_.style.visibility = (this.isHidden_ ? \"hidden\" : \"visible\");\n  }\n};\n\n/**\n * Returns the content of the InfoBox.\n * @returns {string}\n */\nInfoBox.prototype.getContent = function () {\n\n  return this.content_;\n};\n\n/**\n * Returns the geographic location of the InfoBox.\n * @returns {LatLng}\n */\nInfoBox.prototype.getPosition = function () {\n\n  return this.position_;\n};\n\n/**\n * Returns the zIndex for the InfoBox.\n * @returns {number}\n */\nInfoBox.prototype.getZIndex = function () {\n\n  return this.zIndex_;\n};\n\n/**\n * Returns a flag indicating whether the InfoBox is visible.\n * @returns {boolean}\n */\nInfoBox.prototype.getVisible = function () {\n\n  var isVisible;\n\n  if ((typeof this.getMap() === \"undefined\") || (this.getMap() === null)) {\n    isVisible = false;\n  } else {\n    isVisible = !this.isHidden_;\n  }\n  return isVisible;\n};\n\n/**\n * Shows the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\nInfoBox.prototype.show = function () {\n\n  this.isHidden_ = false;\n  if (this.div_) {\n    this.div_.style.visibility = \"visible\";\n  }\n};\n\n/**\n * Hides the InfoBox. [Deprecated; use <tt>setVisible</tt> instead.]\n */\nInfoBox.prototype.hide = function () {\n\n  this.isHidden_ = true;\n  if (this.div_) {\n    this.div_.style.visibility = \"hidden\";\n  }\n};\n\n/**\n * Adds the InfoBox to the specified map or Street View panorama. If <tt>anchor</tt>\n *  (usually a <tt>google.maps.Marker</tt>) is specified, the position\n *  of the InfoBox is set to the position of the <tt>anchor</tt>. If the\n *  anchor is dragged to a new location, the InfoBox moves as well.\n * @param {Map|StreetViewPanorama} map\n * @param {MVCObject} [anchor]\n */\nInfoBox.prototype.open = function (map, anchor) {\n\n  var me = this;\n\n  if (anchor) {\n\n    this.position_ = anchor.getPosition();\n    this.moveListener_ = google.maps.event.addListener(anchor, \"position_changed\", function () {\n      me.setPosition(this.getPosition());\n    });\n\n    this.mapListener_ = google.maps.event.addListener(anchor, \"map_changed\", function() {\n      me.setMap(this.map);\n    });    \n  }\n\n  this.setMap(map);\n\n  if (this.div_) {\n\n    this.panBox_();\n  }\n};\n\n/**\n * Removes the InfoBox from the map.\n */\nInfoBox.prototype.close = function () {\n\n  var i;\n\n  if (this.closeListener_) {\n\n    google.maps.event.removeListener(this.closeListener_);\n    this.closeListener_ = null;\n  }\n\n  if (this.eventListeners_) {\n    \n    for (i = 0; i < this.eventListeners_.length; i++) {\n\n      google.maps.event.removeListener(this.eventListeners_[i]);\n    }\n    this.eventListeners_ = null;\n  }\n\n  if (this.moveListener_) {\n\n    google.maps.event.removeListener(this.moveListener_);\n    this.moveListener_ = null;\n  }\n\n  if (this.mapListener_) {\n    \n    google.maps.event.removeListener(this.mapListener_);\n    this.mapListener_ = null;    \n  }\n \n  if (this.contextListener_) {\n\n    google.maps.event.removeListener(this.contextListener_);\n    this.contextListener_ = null;\n  }\n\n  this.setMap(null);\n};\n\n\nmodule.exports = InfoBox;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///167\n");

/***/ })

});